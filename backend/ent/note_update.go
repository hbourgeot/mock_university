// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/cycle"
	"mocku/backend/ent/note"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/student"
	"mocku/backend/ent/subject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// NoteUpdate is the builder for updating Note entities.
type NoteUpdate struct {
	config
	hooks    []Hook
	mutation *NoteMutation
}

// Where appends a list predicates to the NoteUpdate builder.
func (nu *NoteUpdate) Where(ps ...predicate.Note) *NoteUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetNotes sets the "notes" field.
func (nu *NoteUpdate) SetNotes(f []float64) *NoteUpdate {
	nu.mutation.SetNotes(f)
	return nu
}

// AppendNotes appends f to the "notes" field.
func (nu *NoteUpdate) AppendNotes(f []float64) *NoteUpdate {
	nu.mutation.AppendNotes(f)
	return nu
}

// ClearNotes clears the value of the "notes" field.
func (nu *NoteUpdate) ClearNotes() *NoteUpdate {
	nu.mutation.ClearNotes()
	return nu
}

// SetAverage sets the "average" field.
func (nu *NoteUpdate) SetAverage(f float32) *NoteUpdate {
	nu.mutation.ResetAverage()
	nu.mutation.SetAverage(f)
	return nu
}

// SetNillableAverage sets the "average" field if the given value is not nil.
func (nu *NoteUpdate) SetNillableAverage(f *float32) *NoteUpdate {
	if f != nil {
		nu.SetAverage(*f)
	}
	return nu
}

// AddAverage adds f to the "average" field.
func (nu *NoteUpdate) AddAverage(f float32) *NoteUpdate {
	nu.mutation.AddAverage(f)
	return nu
}

// ClearAverage clears the value of the "average" field.
func (nu *NoteUpdate) ClearAverage() *NoteUpdate {
	nu.mutation.ClearAverage()
	return nu
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (nu *NoteUpdate) AddStudentIDs(ids ...int) *NoteUpdate {
	nu.mutation.AddStudentIDs(ids...)
	return nu
}

// AddStudent adds the "student" edges to the Student entity.
func (nu *NoteUpdate) AddStudent(s ...*Student) *NoteUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.AddStudentIDs(ids...)
}

// AddSubjectIDs adds the "subject" edge to the Subject entity by IDs.
func (nu *NoteUpdate) AddSubjectIDs(ids ...int) *NoteUpdate {
	nu.mutation.AddSubjectIDs(ids...)
	return nu
}

// AddSubject adds the "subject" edges to the Subject entity.
func (nu *NoteUpdate) AddSubject(s ...*Subject) *NoteUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.AddSubjectIDs(ids...)
}

// AddCycleIDs adds the "cycle" edge to the Cycle entity by IDs.
func (nu *NoteUpdate) AddCycleIDs(ids ...int) *NoteUpdate {
	nu.mutation.AddCycleIDs(ids...)
	return nu
}

// AddCycle adds the "cycle" edges to the Cycle entity.
func (nu *NoteUpdate) AddCycle(c ...*Cycle) *NoteUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddCycleIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nu *NoteUpdate) Mutation() *NoteMutation {
	return nu.mutation
}

// ClearStudent clears all "student" edges to the Student entity.
func (nu *NoteUpdate) ClearStudent() *NoteUpdate {
	nu.mutation.ClearStudent()
	return nu
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (nu *NoteUpdate) RemoveStudentIDs(ids ...int) *NoteUpdate {
	nu.mutation.RemoveStudentIDs(ids...)
	return nu
}

// RemoveStudent removes "student" edges to Student entities.
func (nu *NoteUpdate) RemoveStudent(s ...*Student) *NoteUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.RemoveStudentIDs(ids...)
}

// ClearSubject clears all "subject" edges to the Subject entity.
func (nu *NoteUpdate) ClearSubject() *NoteUpdate {
	nu.mutation.ClearSubject()
	return nu
}

// RemoveSubjectIDs removes the "subject" edge to Subject entities by IDs.
func (nu *NoteUpdate) RemoveSubjectIDs(ids ...int) *NoteUpdate {
	nu.mutation.RemoveSubjectIDs(ids...)
	return nu
}

// RemoveSubject removes "subject" edges to Subject entities.
func (nu *NoteUpdate) RemoveSubject(s ...*Subject) *NoteUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nu.RemoveSubjectIDs(ids...)
}

// ClearCycle clears all "cycle" edges to the Cycle entity.
func (nu *NoteUpdate) ClearCycle() *NoteUpdate {
	nu.mutation.ClearCycle()
	return nu
}

// RemoveCycleIDs removes the "cycle" edge to Cycle entities by IDs.
func (nu *NoteUpdate) RemoveCycleIDs(ids ...int) *NoteUpdate {
	nu.mutation.RemoveCycleIDs(ids...)
	return nu
}

// RemoveCycle removes "cycle" edges to Cycle entities.
func (nu *NoteUpdate) RemoveCycle(c ...*Cycle) *NoteUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveCycleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NoteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NoteUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NoteUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NoteUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nu *NoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Notes(); ok {
		_spec.SetField(note.FieldNotes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedNotes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, note.FieldNotes, value)
		})
	}
	if nu.mutation.NotesCleared() {
		_spec.ClearField(note.FieldNotes, field.TypeJSON)
	}
	if value, ok := nu.mutation.Average(); ok {
		_spec.SetField(note.FieldAverage, field.TypeFloat32, value)
	}
	if value, ok := nu.mutation.AddedAverage(); ok {
		_spec.AddField(note.FieldAverage, field.TypeFloat32, value)
	}
	if nu.mutation.AverageCleared() {
		_spec.ClearField(note.FieldAverage, field.TypeFloat32)
	}
	if nu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.StudentTable,
			Columns: note.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedStudentIDs(); len(nodes) > 0 && !nu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.StudentTable,
			Columns: note.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.StudentTable,
			Columns: note.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SubjectTable,
			Columns: note.SubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedSubjectIDs(); len(nodes) > 0 && !nu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SubjectTable,
			Columns: note.SubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SubjectTable,
			Columns: note.SubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.CycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.CycleTable,
			Columns: []string{note.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedCycleIDs(); len(nodes) > 0 && !nu.mutation.CycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.CycleTable,
			Columns: []string{note.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.CycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.CycleTable,
			Columns: []string{note.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NoteUpdateOne is the builder for updating a single Note entity.
type NoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NoteMutation
}

// SetNotes sets the "notes" field.
func (nuo *NoteUpdateOne) SetNotes(f []float64) *NoteUpdateOne {
	nuo.mutation.SetNotes(f)
	return nuo
}

// AppendNotes appends f to the "notes" field.
func (nuo *NoteUpdateOne) AppendNotes(f []float64) *NoteUpdateOne {
	nuo.mutation.AppendNotes(f)
	return nuo
}

// ClearNotes clears the value of the "notes" field.
func (nuo *NoteUpdateOne) ClearNotes() *NoteUpdateOne {
	nuo.mutation.ClearNotes()
	return nuo
}

// SetAverage sets the "average" field.
func (nuo *NoteUpdateOne) SetAverage(f float32) *NoteUpdateOne {
	nuo.mutation.ResetAverage()
	nuo.mutation.SetAverage(f)
	return nuo
}

// SetNillableAverage sets the "average" field if the given value is not nil.
func (nuo *NoteUpdateOne) SetNillableAverage(f *float32) *NoteUpdateOne {
	if f != nil {
		nuo.SetAverage(*f)
	}
	return nuo
}

// AddAverage adds f to the "average" field.
func (nuo *NoteUpdateOne) AddAverage(f float32) *NoteUpdateOne {
	nuo.mutation.AddAverage(f)
	return nuo
}

// ClearAverage clears the value of the "average" field.
func (nuo *NoteUpdateOne) ClearAverage() *NoteUpdateOne {
	nuo.mutation.ClearAverage()
	return nuo
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (nuo *NoteUpdateOne) AddStudentIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.AddStudentIDs(ids...)
	return nuo
}

// AddStudent adds the "student" edges to the Student entity.
func (nuo *NoteUpdateOne) AddStudent(s ...*Student) *NoteUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.AddStudentIDs(ids...)
}

// AddSubjectIDs adds the "subject" edge to the Subject entity by IDs.
func (nuo *NoteUpdateOne) AddSubjectIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.AddSubjectIDs(ids...)
	return nuo
}

// AddSubject adds the "subject" edges to the Subject entity.
func (nuo *NoteUpdateOne) AddSubject(s ...*Subject) *NoteUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.AddSubjectIDs(ids...)
}

// AddCycleIDs adds the "cycle" edge to the Cycle entity by IDs.
func (nuo *NoteUpdateOne) AddCycleIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.AddCycleIDs(ids...)
	return nuo
}

// AddCycle adds the "cycle" edges to the Cycle entity.
func (nuo *NoteUpdateOne) AddCycle(c ...*Cycle) *NoteUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddCycleIDs(ids...)
}

// Mutation returns the NoteMutation object of the builder.
func (nuo *NoteUpdateOne) Mutation() *NoteMutation {
	return nuo.mutation
}

// ClearStudent clears all "student" edges to the Student entity.
func (nuo *NoteUpdateOne) ClearStudent() *NoteUpdateOne {
	nuo.mutation.ClearStudent()
	return nuo
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (nuo *NoteUpdateOne) RemoveStudentIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.RemoveStudentIDs(ids...)
	return nuo
}

// RemoveStudent removes "student" edges to Student entities.
func (nuo *NoteUpdateOne) RemoveStudent(s ...*Student) *NoteUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.RemoveStudentIDs(ids...)
}

// ClearSubject clears all "subject" edges to the Subject entity.
func (nuo *NoteUpdateOne) ClearSubject() *NoteUpdateOne {
	nuo.mutation.ClearSubject()
	return nuo
}

// RemoveSubjectIDs removes the "subject" edge to Subject entities by IDs.
func (nuo *NoteUpdateOne) RemoveSubjectIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.RemoveSubjectIDs(ids...)
	return nuo
}

// RemoveSubject removes "subject" edges to Subject entities.
func (nuo *NoteUpdateOne) RemoveSubject(s ...*Subject) *NoteUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return nuo.RemoveSubjectIDs(ids...)
}

// ClearCycle clears all "cycle" edges to the Cycle entity.
func (nuo *NoteUpdateOne) ClearCycle() *NoteUpdateOne {
	nuo.mutation.ClearCycle()
	return nuo
}

// RemoveCycleIDs removes the "cycle" edge to Cycle entities by IDs.
func (nuo *NoteUpdateOne) RemoveCycleIDs(ids ...int) *NoteUpdateOne {
	nuo.mutation.RemoveCycleIDs(ids...)
	return nuo
}

// RemoveCycle removes "cycle" edges to Cycle entities.
func (nuo *NoteUpdateOne) RemoveCycle(c ...*Cycle) *NoteUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveCycleIDs(ids...)
}

// Where appends a list predicates to the NoteUpdate builder.
func (nuo *NoteUpdateOne) Where(ps ...predicate.Note) *NoteUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NoteUpdateOne) Select(field string, fields ...string) *NoteUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Note entity.
func (nuo *NoteUpdateOne) Save(ctx context.Context) (*Note, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NoteUpdateOne) SaveX(ctx context.Context) *Note {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NoteUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NoteUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nuo *NoteUpdateOne) sqlSave(ctx context.Context) (_node *Note, err error) {
	_spec := sqlgraph.NewUpdateSpec(note.Table, note.Columns, sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Note.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, note.FieldID)
		for _, f := range fields {
			if !note.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != note.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Notes(); ok {
		_spec.SetField(note.FieldNotes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedNotes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, note.FieldNotes, value)
		})
	}
	if nuo.mutation.NotesCleared() {
		_spec.ClearField(note.FieldNotes, field.TypeJSON)
	}
	if value, ok := nuo.mutation.Average(); ok {
		_spec.SetField(note.FieldAverage, field.TypeFloat32, value)
	}
	if value, ok := nuo.mutation.AddedAverage(); ok {
		_spec.AddField(note.FieldAverage, field.TypeFloat32, value)
	}
	if nuo.mutation.AverageCleared() {
		_spec.ClearField(note.FieldAverage, field.TypeFloat32)
	}
	if nuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.StudentTable,
			Columns: note.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedStudentIDs(); len(nodes) > 0 && !nuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.StudentTable,
			Columns: note.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.StudentTable,
			Columns: note.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SubjectTable,
			Columns: note.SubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedSubjectIDs(); len(nodes) > 0 && !nuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SubjectTable,
			Columns: note.SubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   note.SubjectTable,
			Columns: note.SubjectPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.CycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.CycleTable,
			Columns: []string{note.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedCycleIDs(); len(nodes) > 0 && !nuo.mutation.CycleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.CycleTable,
			Columns: []string{note.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.CycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   note.CycleTable,
			Columns: []string{note.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Note{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{note.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
