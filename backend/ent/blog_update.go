// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/blog"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/users"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// BlogUpdate is the builder for updating Blog entities.
type BlogUpdate struct {
	config
	hooks    []Hook
	mutation *BlogMutation
}

// Where appends a list predicates to the BlogUpdate builder.
func (bu *BlogUpdate) Where(ps ...predicate.Blog) *BlogUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BlogUpdate) SetTitle(s string) *BlogUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableTitle(s *string) *BlogUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetText sets the "text" field.
func (bu *BlogUpdate) SetText(s string) *BlogUpdate {
	bu.mutation.SetText(s)
	return bu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableText(s *string) *BlogUpdate {
	if s != nil {
		bu.SetText(*s)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BlogUpdate) SetUpdatedAt(t time.Time) *BlogUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableUpdatedAt(t *time.Time) *BlogUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (bu *BlogUpdate) ClearUpdatedAt() *BlogUpdate {
	bu.mutation.ClearUpdatedAt()
	return bu
}

// SetPublished sets the "published" field.
func (bu *BlogUpdate) SetPublished(b bool) *BlogUpdate {
	bu.mutation.SetPublished(b)
	return bu
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (bu *BlogUpdate) SetNillablePublished(b *bool) *BlogUpdate {
	if b != nil {
		bu.SetPublished(*b)
	}
	return bu
}

// SetTags sets the "tags" field.
func (bu *BlogUpdate) SetTags(s []string) *BlogUpdate {
	bu.mutation.SetTags(s)
	return bu
}

// AppendTags appends s to the "tags" field.
func (bu *BlogUpdate) AppendTags(s []string) *BlogUpdate {
	bu.mutation.AppendTags(s)
	return bu
}

// ClearTags clears the value of the "tags" field.
func (bu *BlogUpdate) ClearTags() *BlogUpdate {
	bu.mutation.ClearTags()
	return bu
}

// SetCategories sets the "categories" field.
func (bu *BlogUpdate) SetCategories(s []string) *BlogUpdate {
	bu.mutation.SetCategories(s)
	return bu
}

// AppendCategories appends s to the "categories" field.
func (bu *BlogUpdate) AppendCategories(s []string) *BlogUpdate {
	bu.mutation.AppendCategories(s)
	return bu
}

// ClearCategories clears the value of the "categories" field.
func (bu *BlogUpdate) ClearCategories() *BlogUpdate {
	bu.mutation.ClearCategories()
	return bu
}

// SetViewCount sets the "view_count" field.
func (bu *BlogUpdate) SetViewCount(i int) *BlogUpdate {
	bu.mutation.ResetViewCount()
	bu.mutation.SetViewCount(i)
	return bu
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableViewCount(i *int) *BlogUpdate {
	if i != nil {
		bu.SetViewCount(*i)
	}
	return bu
}

// AddViewCount adds i to the "view_count" field.
func (bu *BlogUpdate) AddViewCount(i int) *BlogUpdate {
	bu.mutation.AddViewCount(i)
	return bu
}

// SetImages sets the "images" field.
func (bu *BlogUpdate) SetImages(s []string) *BlogUpdate {
	bu.mutation.SetImages(s)
	return bu
}

// AppendImages appends s to the "images" field.
func (bu *BlogUpdate) AppendImages(s []string) *BlogUpdate {
	bu.mutation.AppendImages(s)
	return bu
}

// ClearImages clears the value of the "images" field.
func (bu *BlogUpdate) ClearImages() *BlogUpdate {
	bu.mutation.ClearImages()
	return bu
}

// SetSlug sets the "slug" field.
func (bu *BlogUpdate) SetSlug(s string) *BlogUpdate {
	bu.mutation.SetSlug(s)
	return bu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (bu *BlogUpdate) SetNillableSlug(s *string) *BlogUpdate {
	if s != nil {
		bu.SetSlug(*s)
	}
	return bu
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (bu *BlogUpdate) SetOwnerID(id int) *BlogUpdate {
	bu.mutation.SetOwnerID(id)
	return bu
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (bu *BlogUpdate) SetNillableOwnerID(id *int) *BlogUpdate {
	if id != nil {
		bu = bu.SetOwnerID(*id)
	}
	return bu
}

// SetOwner sets the "owner" edge to the Users entity.
func (bu *BlogUpdate) SetOwner(u *Users) *BlogUpdate {
	return bu.SetOwnerID(u.ID)
}

// Mutation returns the BlogMutation object of the builder.
func (bu *BlogUpdate) Mutation() *BlogMutation {
	return bu.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (bu *BlogUpdate) ClearOwner() *BlogUpdate {
	bu.mutation.ClearOwner()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BlogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlogUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlogUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlogUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BlogUpdate) check() error {
	if v, ok := bu.mutation.Title(); ok {
		if err := blog.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Blog.title": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Text(); ok {
		if err := blog.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Blog.text": %w`, err)}
		}
	}
	return nil
}

func (bu *BlogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(blog.Table, blog.Columns, sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(blog.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Text(); ok {
		_spec.SetField(blog.FieldText, field.TypeString, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(blog.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UpdatedAtCleared() {
		_spec.ClearField(blog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := bu.mutation.Published(); ok {
		_spec.SetField(blog.FieldPublished, field.TypeBool, value)
	}
	if value, ok := bu.mutation.Tags(); ok {
		_spec.SetField(blog.FieldTags, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldTags, value)
		})
	}
	if bu.mutation.TagsCleared() {
		_spec.ClearField(blog.FieldTags, field.TypeJSON)
	}
	if value, ok := bu.mutation.Categories(); ok {
		_spec.SetField(blog.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldCategories, value)
		})
	}
	if bu.mutation.CategoriesCleared() {
		_spec.ClearField(blog.FieldCategories, field.TypeJSON)
	}
	if value, ok := bu.mutation.ViewCount(); ok {
		_spec.SetField(blog.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedViewCount(); ok {
		_spec.AddField(blog.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Images(); ok {
		_spec.SetField(blog.FieldImages, field.TypeJSON, value)
	}
	if value, ok := bu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldImages, value)
		})
	}
	if bu.mutation.ImagesCleared() {
		_spec.ClearField(blog.FieldImages, field.TypeJSON)
	}
	if value, ok := bu.mutation.Slug(); ok {
		_spec.SetField(blog.FieldSlug, field.TypeString, value)
	}
	if bu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blog.OwnerTable,
			Columns: []string{blog.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blog.OwnerTable,
			Columns: []string{blog.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BlogUpdateOne is the builder for updating a single Blog entity.
type BlogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlogMutation
}

// SetTitle sets the "title" field.
func (buo *BlogUpdateOne) SetTitle(s string) *BlogUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableTitle(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetText sets the "text" field.
func (buo *BlogUpdateOne) SetText(s string) *BlogUpdateOne {
	buo.mutation.SetText(s)
	return buo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableText(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetText(*s)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BlogUpdateOne) SetUpdatedAt(t time.Time) *BlogUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableUpdatedAt(t *time.Time) *BlogUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (buo *BlogUpdateOne) ClearUpdatedAt() *BlogUpdateOne {
	buo.mutation.ClearUpdatedAt()
	return buo
}

// SetPublished sets the "published" field.
func (buo *BlogUpdateOne) SetPublished(b bool) *BlogUpdateOne {
	buo.mutation.SetPublished(b)
	return buo
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillablePublished(b *bool) *BlogUpdateOne {
	if b != nil {
		buo.SetPublished(*b)
	}
	return buo
}

// SetTags sets the "tags" field.
func (buo *BlogUpdateOne) SetTags(s []string) *BlogUpdateOne {
	buo.mutation.SetTags(s)
	return buo
}

// AppendTags appends s to the "tags" field.
func (buo *BlogUpdateOne) AppendTags(s []string) *BlogUpdateOne {
	buo.mutation.AppendTags(s)
	return buo
}

// ClearTags clears the value of the "tags" field.
func (buo *BlogUpdateOne) ClearTags() *BlogUpdateOne {
	buo.mutation.ClearTags()
	return buo
}

// SetCategories sets the "categories" field.
func (buo *BlogUpdateOne) SetCategories(s []string) *BlogUpdateOne {
	buo.mutation.SetCategories(s)
	return buo
}

// AppendCategories appends s to the "categories" field.
func (buo *BlogUpdateOne) AppendCategories(s []string) *BlogUpdateOne {
	buo.mutation.AppendCategories(s)
	return buo
}

// ClearCategories clears the value of the "categories" field.
func (buo *BlogUpdateOne) ClearCategories() *BlogUpdateOne {
	buo.mutation.ClearCategories()
	return buo
}

// SetViewCount sets the "view_count" field.
func (buo *BlogUpdateOne) SetViewCount(i int) *BlogUpdateOne {
	buo.mutation.ResetViewCount()
	buo.mutation.SetViewCount(i)
	return buo
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableViewCount(i *int) *BlogUpdateOne {
	if i != nil {
		buo.SetViewCount(*i)
	}
	return buo
}

// AddViewCount adds i to the "view_count" field.
func (buo *BlogUpdateOne) AddViewCount(i int) *BlogUpdateOne {
	buo.mutation.AddViewCount(i)
	return buo
}

// SetImages sets the "images" field.
func (buo *BlogUpdateOne) SetImages(s []string) *BlogUpdateOne {
	buo.mutation.SetImages(s)
	return buo
}

// AppendImages appends s to the "images" field.
func (buo *BlogUpdateOne) AppendImages(s []string) *BlogUpdateOne {
	buo.mutation.AppendImages(s)
	return buo
}

// ClearImages clears the value of the "images" field.
func (buo *BlogUpdateOne) ClearImages() *BlogUpdateOne {
	buo.mutation.ClearImages()
	return buo
}

// SetSlug sets the "slug" field.
func (buo *BlogUpdateOne) SetSlug(s string) *BlogUpdateOne {
	buo.mutation.SetSlug(s)
	return buo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableSlug(s *string) *BlogUpdateOne {
	if s != nil {
		buo.SetSlug(*s)
	}
	return buo
}

// SetOwnerID sets the "owner" edge to the Users entity by ID.
func (buo *BlogUpdateOne) SetOwnerID(id int) *BlogUpdateOne {
	buo.mutation.SetOwnerID(id)
	return buo
}

// SetNillableOwnerID sets the "owner" edge to the Users entity by ID if the given value is not nil.
func (buo *BlogUpdateOne) SetNillableOwnerID(id *int) *BlogUpdateOne {
	if id != nil {
		buo = buo.SetOwnerID(*id)
	}
	return buo
}

// SetOwner sets the "owner" edge to the Users entity.
func (buo *BlogUpdateOne) SetOwner(u *Users) *BlogUpdateOne {
	return buo.SetOwnerID(u.ID)
}

// Mutation returns the BlogMutation object of the builder.
func (buo *BlogUpdateOne) Mutation() *BlogMutation {
	return buo.mutation
}

// ClearOwner clears the "owner" edge to the Users entity.
func (buo *BlogUpdateOne) ClearOwner() *BlogUpdateOne {
	buo.mutation.ClearOwner()
	return buo
}

// Where appends a list predicates to the BlogUpdate builder.
func (buo *BlogUpdateOne) Where(ps ...predicate.Blog) *BlogUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BlogUpdateOne) Select(field string, fields ...string) *BlogUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Blog entity.
func (buo *BlogUpdateOne) Save(ctx context.Context) (*Blog, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlogUpdateOne) SaveX(ctx context.Context) *Blog {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BlogUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlogUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BlogUpdateOne) check() error {
	if v, ok := buo.mutation.Title(); ok {
		if err := blog.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Blog.title": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Text(); ok {
		if err := blog.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Blog.text": %w`, err)}
		}
	}
	return nil
}

func (buo *BlogUpdateOne) sqlSave(ctx context.Context) (_node *Blog, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(blog.Table, blog.Columns, sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Blog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blog.FieldID)
		for _, f := range fields {
			if !blog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(blog.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Text(); ok {
		_spec.SetField(blog.FieldText, field.TypeString, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(blog.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UpdatedAtCleared() {
		_spec.ClearField(blog.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := buo.mutation.Published(); ok {
		_spec.SetField(blog.FieldPublished, field.TypeBool, value)
	}
	if value, ok := buo.mutation.Tags(); ok {
		_spec.SetField(blog.FieldTags, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldTags, value)
		})
	}
	if buo.mutation.TagsCleared() {
		_spec.ClearField(blog.FieldTags, field.TypeJSON)
	}
	if value, ok := buo.mutation.Categories(); ok {
		_spec.SetField(blog.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldCategories, value)
		})
	}
	if buo.mutation.CategoriesCleared() {
		_spec.ClearField(blog.FieldCategories, field.TypeJSON)
	}
	if value, ok := buo.mutation.ViewCount(); ok {
		_spec.SetField(blog.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedViewCount(); ok {
		_spec.AddField(blog.FieldViewCount, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Images(); ok {
		_spec.SetField(blog.FieldImages, field.TypeJSON, value)
	}
	if value, ok := buo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, blog.FieldImages, value)
		})
	}
	if buo.mutation.ImagesCleared() {
		_spec.ClearField(blog.FieldImages, field.TypeJSON)
	}
	if value, ok := buo.mutation.Slug(); ok {
		_spec.SetField(blog.FieldSlug, field.TypeString, value)
	}
	if buo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blog.OwnerTable,
			Columns: []string{blog.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   blog.OwnerTable,
			Columns: []string{blog.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Blog{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
