// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/activity"
	"mocku/backend/ent/blog"
	"mocku/backend/ent/notification"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/professor"
	"mocku/backend/ent/request"
	"mocku/backend/ent/role"
	"mocku/backend/ent/student"
	"mocku/backend/ent/users"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UsersUpdate is the builder for updating Users entities.
type UsersUpdate struct {
	config
	hooks    []Hook
	mutation *UsersMutation
}

// Where appends a list predicates to the UsersUpdate builder.
func (uu *UsersUpdate) Where(ps ...predicate.Users) *UsersUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UsersUpdate) SetUsername(s string) *UsersUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableUsername(s *string) *UsersUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UsersUpdate) SetPassword(s string) *UsersUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UsersUpdate) SetNillablePassword(s *string) *UsersUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UsersUpdate) SetEmail(s string) *UsersUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableEmail(s *string) *UsersUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UsersUpdate) SetName(s string) *UsersUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableName(s *string) *UsersUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UsersUpdate) SetAvatar(s string) *UsersUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableAvatar(s *string) *UsersUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetIsActive sets the "is_active" field.
func (uu *UsersUpdate) SetIsActive(b bool) *UsersUpdate {
	uu.mutation.SetIsActive(b)
	return uu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uu *UsersUpdate) SetNillableIsActive(b *bool) *UsersUpdate {
	if b != nil {
		uu.SetIsActive(*b)
	}
	return uu
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uu *UsersUpdate) SetRoleID(id int) *UsersUpdate {
	uu.mutation.SetRoleID(id)
	return uu
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uu *UsersUpdate) SetNillableRoleID(id *int) *UsersUpdate {
	if id != nil {
		uu = uu.SetRoleID(*id)
	}
	return uu
}

// SetRole sets the "role" edge to the Role entity.
func (uu *UsersUpdate) SetRole(r *Role) *UsersUpdate {
	return uu.SetRoleID(r.ID)
}

// AddRequestsMadeIDs adds the "requests_made" edge to the Request entity by IDs.
func (uu *UsersUpdate) AddRequestsMadeIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddRequestsMadeIDs(ids...)
	return uu
}

// AddRequestsMade adds the "requests_made" edges to the Request entity.
func (uu *UsersUpdate) AddRequestsMade(r ...*Request) *UsersUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRequestsMadeIDs(ids...)
}

// AddRequestsReceivedIDs adds the "requests_received" edge to the Request entity by IDs.
func (uu *UsersUpdate) AddRequestsReceivedIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddRequestsReceivedIDs(ids...)
	return uu
}

// AddRequestsReceived adds the "requests_received" edges to the Request entity.
func (uu *UsersUpdate) AddRequestsReceived(r ...*Request) *UsersUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRequestsReceivedIDs(ids...)
}

// AddBlogIDs adds the "blog" edge to the Blog entity by IDs.
func (uu *UsersUpdate) AddBlogIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddBlogIDs(ids...)
	return uu
}

// AddBlog adds the "blog" edges to the Blog entity.
func (uu *UsersUpdate) AddBlog(b ...*Blog) *UsersUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.AddBlogIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uu *UsersUpdate) AddNotificationIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddNotificationIDs(ids...)
	return uu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uu *UsersUpdate) AddNotifications(n ...*Notification) *UsersUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddNotificationIDs(ids...)
}

// AddActivityIDs adds the "activity" edge to the Activity entity by IDs.
func (uu *UsersUpdate) AddActivityIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddActivityIDs(ids...)
	return uu
}

// AddActivity adds the "activity" edges to the Activity entity.
func (uu *UsersUpdate) AddActivity(a ...*Activity) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddActivityIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (uu *UsersUpdate) AddStudentIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddStudentIDs(ids...)
	return uu
}

// AddStudents adds the "students" edges to the Student entity.
func (uu *UsersUpdate) AddStudents(s ...*Student) *UsersUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStudentIDs(ids...)
}

// AddProfessorIDs adds the "professor" edge to the Professor entity by IDs.
func (uu *UsersUpdate) AddProfessorIDs(ids ...int) *UsersUpdate {
	uu.mutation.AddProfessorIDs(ids...)
	return uu
}

// AddProfessor adds the "professor" edges to the Professor entity.
func (uu *UsersUpdate) AddProfessor(p ...*Professor) *UsersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddProfessorIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uu *UsersUpdate) Mutation() *UsersMutation {
	return uu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (uu *UsersUpdate) ClearRole() *UsersUpdate {
	uu.mutation.ClearRole()
	return uu
}

// ClearRequestsMade clears all "requests_made" edges to the Request entity.
func (uu *UsersUpdate) ClearRequestsMade() *UsersUpdate {
	uu.mutation.ClearRequestsMade()
	return uu
}

// RemoveRequestsMadeIDs removes the "requests_made" edge to Request entities by IDs.
func (uu *UsersUpdate) RemoveRequestsMadeIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveRequestsMadeIDs(ids...)
	return uu
}

// RemoveRequestsMade removes "requests_made" edges to Request entities.
func (uu *UsersUpdate) RemoveRequestsMade(r ...*Request) *UsersUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRequestsMadeIDs(ids...)
}

// ClearRequestsReceived clears all "requests_received" edges to the Request entity.
func (uu *UsersUpdate) ClearRequestsReceived() *UsersUpdate {
	uu.mutation.ClearRequestsReceived()
	return uu
}

// RemoveRequestsReceivedIDs removes the "requests_received" edge to Request entities by IDs.
func (uu *UsersUpdate) RemoveRequestsReceivedIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveRequestsReceivedIDs(ids...)
	return uu
}

// RemoveRequestsReceived removes "requests_received" edges to Request entities.
func (uu *UsersUpdate) RemoveRequestsReceived(r ...*Request) *UsersUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRequestsReceivedIDs(ids...)
}

// ClearBlog clears all "blog" edges to the Blog entity.
func (uu *UsersUpdate) ClearBlog() *UsersUpdate {
	uu.mutation.ClearBlog()
	return uu
}

// RemoveBlogIDs removes the "blog" edge to Blog entities by IDs.
func (uu *UsersUpdate) RemoveBlogIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveBlogIDs(ids...)
	return uu
}

// RemoveBlog removes "blog" edges to Blog entities.
func (uu *UsersUpdate) RemoveBlog(b ...*Blog) *UsersUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uu.RemoveBlogIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uu *UsersUpdate) ClearNotifications() *UsersUpdate {
	uu.mutation.ClearNotifications()
	return uu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uu *UsersUpdate) RemoveNotificationIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveNotificationIDs(ids...)
	return uu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uu *UsersUpdate) RemoveNotifications(n ...*Notification) *UsersUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveNotificationIDs(ids...)
}

// ClearActivity clears all "activity" edges to the Activity entity.
func (uu *UsersUpdate) ClearActivity() *UsersUpdate {
	uu.mutation.ClearActivity()
	return uu
}

// RemoveActivityIDs removes the "activity" edge to Activity entities by IDs.
func (uu *UsersUpdate) RemoveActivityIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveActivityIDs(ids...)
	return uu
}

// RemoveActivity removes "activity" edges to Activity entities.
func (uu *UsersUpdate) RemoveActivity(a ...*Activity) *UsersUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveActivityIDs(ids...)
}

// ClearStudents clears all "students" edges to the Student entity.
func (uu *UsersUpdate) ClearStudents() *UsersUpdate {
	uu.mutation.ClearStudents()
	return uu
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (uu *UsersUpdate) RemoveStudentIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveStudentIDs(ids...)
	return uu
}

// RemoveStudents removes "students" edges to Student entities.
func (uu *UsersUpdate) RemoveStudents(s ...*Student) *UsersUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStudentIDs(ids...)
}

// ClearProfessor clears all "professor" edges to the Professor entity.
func (uu *UsersUpdate) ClearProfessor() *UsersUpdate {
	uu.mutation.ClearProfessor()
	return uu
}

// RemoveProfessorIDs removes the "professor" edge to Professor entities by IDs.
func (uu *UsersUpdate) RemoveProfessorIDs(ids ...int) *UsersUpdate {
	uu.mutation.RemoveProfessorIDs(ids...)
	return uu
}

// RemoveProfessor removes "professor" edges to Professor entities.
func (uu *UsersUpdate) RemoveProfessor(p ...*Professor) *UsersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveProfessorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UsersUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UsersUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UsersUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UsersUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := users.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Users.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := users.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Users.password": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Users.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Name(); ok {
		if err := users.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Users.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Avatar(); ok {
		if err := users.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "Users.avatar": %w`, err)}
		}
	}
	return nil
}

func (uu *UsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(users.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(users.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(users.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(users.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(users.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsActive(); ok {
		_spec.SetField(users.FieldIsActive, field.TypeBool, value)
	}
	if uu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   users.RoleTable,
			Columns: []string{users.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   users.RoleTable,
			Columns: []string{users.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RequestsMadeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsMadeTable,
			Columns: []string{users.RequestsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRequestsMadeIDs(); len(nodes) > 0 && !uu.mutation.RequestsMadeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsMadeTable,
			Columns: []string{users.RequestsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RequestsMadeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsMadeTable,
			Columns: []string{users.RequestsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RequestsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsReceivedTable,
			Columns: []string{users.RequestsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRequestsReceivedIDs(); len(nodes) > 0 && !uu.mutation.RequestsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsReceivedTable,
			Columns: []string{users.RequestsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RequestsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsReceivedTable,
			Columns: []string{users.RequestsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.BlogTable,
			Columns: []string{users.BlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBlogIDs(); len(nodes) > 0 && !uu.mutation.BlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.BlogTable,
			Columns: []string{users.BlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.BlogTable,
			Columns: []string{users.BlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.NotificationsTable,
			Columns: []string{users.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.NotificationsTable,
			Columns: []string{users.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.NotificationsTable,
			Columns: []string{users.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ActivityTable,
			Columns: []string{users.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedActivityIDs(); len(nodes) > 0 && !uu.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ActivityTable,
			Columns: []string{users.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ActivityTable,
			Columns: []string{users.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.StudentsTable,
			Columns: []string{users.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !uu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.StudentsTable,
			Columns: []string{users.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.StudentsTable,
			Columns: []string{users.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ProfessorTable,
			Columns: []string{users.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedProfessorIDs(); len(nodes) > 0 && !uu.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ProfessorTable,
			Columns: []string{users.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProfessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ProfessorTable,
			Columns: []string{users.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UsersUpdateOne is the builder for updating a single Users entity.
type UsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UsersMutation
}

// SetUsername sets the "username" field.
func (uuo *UsersUpdateOne) SetUsername(s string) *UsersUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableUsername(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UsersUpdateOne) SetPassword(s string) *UsersUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillablePassword(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UsersUpdateOne) SetEmail(s string) *UsersUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableEmail(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UsersUpdateOne) SetName(s string) *UsersUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableName(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UsersUpdateOne) SetAvatar(s string) *UsersUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableAvatar(s *string) *UsersUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetIsActive sets the "is_active" field.
func (uuo *UsersUpdateOne) SetIsActive(b bool) *UsersUpdateOne {
	uuo.mutation.SetIsActive(b)
	return uuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableIsActive(b *bool) *UsersUpdateOne {
	if b != nil {
		uuo.SetIsActive(*b)
	}
	return uuo
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uuo *UsersUpdateOne) SetRoleID(id int) *UsersUpdateOne {
	uuo.mutation.SetRoleID(id)
	return uuo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uuo *UsersUpdateOne) SetNillableRoleID(id *int) *UsersUpdateOne {
	if id != nil {
		uuo = uuo.SetRoleID(*id)
	}
	return uuo
}

// SetRole sets the "role" edge to the Role entity.
func (uuo *UsersUpdateOne) SetRole(r *Role) *UsersUpdateOne {
	return uuo.SetRoleID(r.ID)
}

// AddRequestsMadeIDs adds the "requests_made" edge to the Request entity by IDs.
func (uuo *UsersUpdateOne) AddRequestsMadeIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddRequestsMadeIDs(ids...)
	return uuo
}

// AddRequestsMade adds the "requests_made" edges to the Request entity.
func (uuo *UsersUpdateOne) AddRequestsMade(r ...*Request) *UsersUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRequestsMadeIDs(ids...)
}

// AddRequestsReceivedIDs adds the "requests_received" edge to the Request entity by IDs.
func (uuo *UsersUpdateOne) AddRequestsReceivedIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddRequestsReceivedIDs(ids...)
	return uuo
}

// AddRequestsReceived adds the "requests_received" edges to the Request entity.
func (uuo *UsersUpdateOne) AddRequestsReceived(r ...*Request) *UsersUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRequestsReceivedIDs(ids...)
}

// AddBlogIDs adds the "blog" edge to the Blog entity by IDs.
func (uuo *UsersUpdateOne) AddBlogIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddBlogIDs(ids...)
	return uuo
}

// AddBlog adds the "blog" edges to the Blog entity.
func (uuo *UsersUpdateOne) AddBlog(b ...*Blog) *UsersUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.AddBlogIDs(ids...)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (uuo *UsersUpdateOne) AddNotificationIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddNotificationIDs(ids...)
	return uuo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (uuo *UsersUpdateOne) AddNotifications(n ...*Notification) *UsersUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddNotificationIDs(ids...)
}

// AddActivityIDs adds the "activity" edge to the Activity entity by IDs.
func (uuo *UsersUpdateOne) AddActivityIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddActivityIDs(ids...)
	return uuo
}

// AddActivity adds the "activity" edges to the Activity entity.
func (uuo *UsersUpdateOne) AddActivity(a ...*Activity) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddActivityIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (uuo *UsersUpdateOne) AddStudentIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddStudentIDs(ids...)
	return uuo
}

// AddStudents adds the "students" edges to the Student entity.
func (uuo *UsersUpdateOne) AddStudents(s ...*Student) *UsersUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStudentIDs(ids...)
}

// AddProfessorIDs adds the "professor" edge to the Professor entity by IDs.
func (uuo *UsersUpdateOne) AddProfessorIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.AddProfessorIDs(ids...)
	return uuo
}

// AddProfessor adds the "professor" edges to the Professor entity.
func (uuo *UsersUpdateOne) AddProfessor(p ...*Professor) *UsersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddProfessorIDs(ids...)
}

// Mutation returns the UsersMutation object of the builder.
func (uuo *UsersUpdateOne) Mutation() *UsersMutation {
	return uuo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (uuo *UsersUpdateOne) ClearRole() *UsersUpdateOne {
	uuo.mutation.ClearRole()
	return uuo
}

// ClearRequestsMade clears all "requests_made" edges to the Request entity.
func (uuo *UsersUpdateOne) ClearRequestsMade() *UsersUpdateOne {
	uuo.mutation.ClearRequestsMade()
	return uuo
}

// RemoveRequestsMadeIDs removes the "requests_made" edge to Request entities by IDs.
func (uuo *UsersUpdateOne) RemoveRequestsMadeIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveRequestsMadeIDs(ids...)
	return uuo
}

// RemoveRequestsMade removes "requests_made" edges to Request entities.
func (uuo *UsersUpdateOne) RemoveRequestsMade(r ...*Request) *UsersUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRequestsMadeIDs(ids...)
}

// ClearRequestsReceived clears all "requests_received" edges to the Request entity.
func (uuo *UsersUpdateOne) ClearRequestsReceived() *UsersUpdateOne {
	uuo.mutation.ClearRequestsReceived()
	return uuo
}

// RemoveRequestsReceivedIDs removes the "requests_received" edge to Request entities by IDs.
func (uuo *UsersUpdateOne) RemoveRequestsReceivedIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveRequestsReceivedIDs(ids...)
	return uuo
}

// RemoveRequestsReceived removes "requests_received" edges to Request entities.
func (uuo *UsersUpdateOne) RemoveRequestsReceived(r ...*Request) *UsersUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRequestsReceivedIDs(ids...)
}

// ClearBlog clears all "blog" edges to the Blog entity.
func (uuo *UsersUpdateOne) ClearBlog() *UsersUpdateOne {
	uuo.mutation.ClearBlog()
	return uuo
}

// RemoveBlogIDs removes the "blog" edge to Blog entities by IDs.
func (uuo *UsersUpdateOne) RemoveBlogIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveBlogIDs(ids...)
	return uuo
}

// RemoveBlog removes "blog" edges to Blog entities.
func (uuo *UsersUpdateOne) RemoveBlog(b ...*Blog) *UsersUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return uuo.RemoveBlogIDs(ids...)
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (uuo *UsersUpdateOne) ClearNotifications() *UsersUpdateOne {
	uuo.mutation.ClearNotifications()
	return uuo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (uuo *UsersUpdateOne) RemoveNotificationIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveNotificationIDs(ids...)
	return uuo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (uuo *UsersUpdateOne) RemoveNotifications(n ...*Notification) *UsersUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveNotificationIDs(ids...)
}

// ClearActivity clears all "activity" edges to the Activity entity.
func (uuo *UsersUpdateOne) ClearActivity() *UsersUpdateOne {
	uuo.mutation.ClearActivity()
	return uuo
}

// RemoveActivityIDs removes the "activity" edge to Activity entities by IDs.
func (uuo *UsersUpdateOne) RemoveActivityIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveActivityIDs(ids...)
	return uuo
}

// RemoveActivity removes "activity" edges to Activity entities.
func (uuo *UsersUpdateOne) RemoveActivity(a ...*Activity) *UsersUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveActivityIDs(ids...)
}

// ClearStudents clears all "students" edges to the Student entity.
func (uuo *UsersUpdateOne) ClearStudents() *UsersUpdateOne {
	uuo.mutation.ClearStudents()
	return uuo
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (uuo *UsersUpdateOne) RemoveStudentIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveStudentIDs(ids...)
	return uuo
}

// RemoveStudents removes "students" edges to Student entities.
func (uuo *UsersUpdateOne) RemoveStudents(s ...*Student) *UsersUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStudentIDs(ids...)
}

// ClearProfessor clears all "professor" edges to the Professor entity.
func (uuo *UsersUpdateOne) ClearProfessor() *UsersUpdateOne {
	uuo.mutation.ClearProfessor()
	return uuo
}

// RemoveProfessorIDs removes the "professor" edge to Professor entities by IDs.
func (uuo *UsersUpdateOne) RemoveProfessorIDs(ids ...int) *UsersUpdateOne {
	uuo.mutation.RemoveProfessorIDs(ids...)
	return uuo
}

// RemoveProfessor removes "professor" edges to Professor entities.
func (uuo *UsersUpdateOne) RemoveProfessor(p ...*Professor) *UsersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveProfessorIDs(ids...)
}

// Where appends a list predicates to the UsersUpdate builder.
func (uuo *UsersUpdateOne) Where(ps ...predicate.Users) *UsersUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UsersUpdateOne) Select(field string, fields ...string) *UsersUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Users entity.
func (uuo *UsersUpdateOne) Save(ctx context.Context) (*Users, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UsersUpdateOne) SaveX(ctx context.Context) *Users {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UsersUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UsersUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UsersUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := users.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Users.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := users.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Users.password": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := users.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Users.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Name(); ok {
		if err := users.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Users.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Avatar(); ok {
		if err := users.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "Users.avatar": %w`, err)}
		}
	}
	return nil
}

func (uuo *UsersUpdateOne) sqlSave(ctx context.Context) (_node *Users, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(users.Table, users.Columns, sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Users.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, users.FieldID)
		for _, f := range fields {
			if !users.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != users.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(users.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(users.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(users.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(users.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(users.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsActive(); ok {
		_spec.SetField(users.FieldIsActive, field.TypeBool, value)
	}
	if uuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   users.RoleTable,
			Columns: []string{users.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   users.RoleTable,
			Columns: []string{users.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RequestsMadeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsMadeTable,
			Columns: []string{users.RequestsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRequestsMadeIDs(); len(nodes) > 0 && !uuo.mutation.RequestsMadeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsMadeTable,
			Columns: []string{users.RequestsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RequestsMadeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsMadeTable,
			Columns: []string{users.RequestsMadeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RequestsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsReceivedTable,
			Columns: []string{users.RequestsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRequestsReceivedIDs(); len(nodes) > 0 && !uuo.mutation.RequestsReceivedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsReceivedTable,
			Columns: []string{users.RequestsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RequestsReceivedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.RequestsReceivedTable,
			Columns: []string{users.RequestsReceivedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.BlogTable,
			Columns: []string{users.BlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBlogIDs(); len(nodes) > 0 && !uuo.mutation.BlogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.BlogTable,
			Columns: []string{users.BlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BlogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.BlogTable,
			Columns: []string{users.BlogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(blog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.NotificationsTable,
			Columns: []string{users.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !uuo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.NotificationsTable,
			Columns: []string{users.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.NotificationsTable,
			Columns: []string{users.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ActivityTable,
			Columns: []string{users.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedActivityIDs(); len(nodes) > 0 && !uuo.mutation.ActivityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ActivityTable,
			Columns: []string{users.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ActivityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ActivityTable,
			Columns: []string{users.ActivityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activity.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.StudentsTable,
			Columns: []string{users.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !uuo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.StudentsTable,
			Columns: []string{users.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.StudentsTable,
			Columns: []string{users.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ProfessorTable,
			Columns: []string{users.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedProfessorIDs(); len(nodes) > 0 && !uuo.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ProfessorTable,
			Columns: []string{users.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProfessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   users.ProfessorTable,
			Columns: []string{users.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Users{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{users.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
