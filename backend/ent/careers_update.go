// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/careers"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/professor"
	"mocku/backend/ent/student"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CareersUpdate is the builder for updating Careers entities.
type CareersUpdate struct {
	config
	hooks    []Hook
	mutation *CareersMutation
}

// Where appends a list predicates to the CareersUpdate builder.
func (cu *CareersUpdate) Where(ps ...predicate.Careers) *CareersUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CareersUpdate) SetName(s string) *CareersUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CareersUpdate) SetNillableName(s *string) *CareersUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CareersUpdate) SetDescription(s string) *CareersUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CareersUpdate) SetNillableDescription(s *string) *CareersUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// AddLeaderIDs adds the "leader" edge to the Professor entity by IDs.
func (cu *CareersUpdate) AddLeaderIDs(ids ...int) *CareersUpdate {
	cu.mutation.AddLeaderIDs(ids...)
	return cu
}

// AddLeader adds the "leader" edges to the Professor entity.
func (cu *CareersUpdate) AddLeader(p ...*Professor) *CareersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddLeaderIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (cu *CareersUpdate) AddStudentIDs(ids ...int) *CareersUpdate {
	cu.mutation.AddStudentIDs(ids...)
	return cu
}

// AddStudents adds the "students" edges to the Student entity.
func (cu *CareersUpdate) AddStudents(s ...*Student) *CareersUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddStudentIDs(ids...)
}

// Mutation returns the CareersMutation object of the builder.
func (cu *CareersUpdate) Mutation() *CareersMutation {
	return cu.mutation
}

// ClearLeader clears all "leader" edges to the Professor entity.
func (cu *CareersUpdate) ClearLeader() *CareersUpdate {
	cu.mutation.ClearLeader()
	return cu
}

// RemoveLeaderIDs removes the "leader" edge to Professor entities by IDs.
func (cu *CareersUpdate) RemoveLeaderIDs(ids ...int) *CareersUpdate {
	cu.mutation.RemoveLeaderIDs(ids...)
	return cu
}

// RemoveLeader removes "leader" edges to Professor entities.
func (cu *CareersUpdate) RemoveLeader(p ...*Professor) *CareersUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemoveLeaderIDs(ids...)
}

// ClearStudents clears all "students" edges to the Student entity.
func (cu *CareersUpdate) ClearStudents() *CareersUpdate {
	cu.mutation.ClearStudents()
	return cu
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (cu *CareersUpdate) RemoveStudentIDs(ids ...int) *CareersUpdate {
	cu.mutation.RemoveStudentIDs(ids...)
	return cu
}

// RemoveStudents removes "students" edges to Student entities.
func (cu *CareersUpdate) RemoveStudents(s ...*Student) *CareersUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CareersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CareersUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CareersUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CareersUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CareersUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := careers.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Careers.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Description(); ok {
		if err := careers.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Careers.description": %w`, err)}
		}
	}
	return nil
}

func (cu *CareersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(careers.Table, careers.Columns, sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(careers.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(careers.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   careers.LeaderTable,
			Columns: []string{careers.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedLeaderIDs(); len(nodes) > 0 && !cu.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   careers.LeaderTable,
			Columns: []string{careers.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   careers.LeaderTable,
			Columns: []string{careers.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   careers.StudentsTable,
			Columns: careers.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !cu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   careers.StudentsTable,
			Columns: careers.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   careers.StudentsTable,
			Columns: careers.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{careers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CareersUpdateOne is the builder for updating a single Careers entity.
type CareersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CareersMutation
}

// SetName sets the "name" field.
func (cuo *CareersUpdateOne) SetName(s string) *CareersUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CareersUpdateOne) SetNillableName(s *string) *CareersUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CareersUpdateOne) SetDescription(s string) *CareersUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CareersUpdateOne) SetNillableDescription(s *string) *CareersUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// AddLeaderIDs adds the "leader" edge to the Professor entity by IDs.
func (cuo *CareersUpdateOne) AddLeaderIDs(ids ...int) *CareersUpdateOne {
	cuo.mutation.AddLeaderIDs(ids...)
	return cuo
}

// AddLeader adds the "leader" edges to the Professor entity.
func (cuo *CareersUpdateOne) AddLeader(p ...*Professor) *CareersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddLeaderIDs(ids...)
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (cuo *CareersUpdateOne) AddStudentIDs(ids ...int) *CareersUpdateOne {
	cuo.mutation.AddStudentIDs(ids...)
	return cuo
}

// AddStudents adds the "students" edges to the Student entity.
func (cuo *CareersUpdateOne) AddStudents(s ...*Student) *CareersUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddStudentIDs(ids...)
}

// Mutation returns the CareersMutation object of the builder.
func (cuo *CareersUpdateOne) Mutation() *CareersMutation {
	return cuo.mutation
}

// ClearLeader clears all "leader" edges to the Professor entity.
func (cuo *CareersUpdateOne) ClearLeader() *CareersUpdateOne {
	cuo.mutation.ClearLeader()
	return cuo
}

// RemoveLeaderIDs removes the "leader" edge to Professor entities by IDs.
func (cuo *CareersUpdateOne) RemoveLeaderIDs(ids ...int) *CareersUpdateOne {
	cuo.mutation.RemoveLeaderIDs(ids...)
	return cuo
}

// RemoveLeader removes "leader" edges to Professor entities.
func (cuo *CareersUpdateOne) RemoveLeader(p ...*Professor) *CareersUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemoveLeaderIDs(ids...)
}

// ClearStudents clears all "students" edges to the Student entity.
func (cuo *CareersUpdateOne) ClearStudents() *CareersUpdateOne {
	cuo.mutation.ClearStudents()
	return cuo
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (cuo *CareersUpdateOne) RemoveStudentIDs(ids ...int) *CareersUpdateOne {
	cuo.mutation.RemoveStudentIDs(ids...)
	return cuo
}

// RemoveStudents removes "students" edges to Student entities.
func (cuo *CareersUpdateOne) RemoveStudents(s ...*Student) *CareersUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveStudentIDs(ids...)
}

// Where appends a list predicates to the CareersUpdate builder.
func (cuo *CareersUpdateOne) Where(ps ...predicate.Careers) *CareersUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CareersUpdateOne) Select(field string, fields ...string) *CareersUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Careers entity.
func (cuo *CareersUpdateOne) Save(ctx context.Context) (*Careers, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CareersUpdateOne) SaveX(ctx context.Context) *Careers {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CareersUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CareersUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CareersUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := careers.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Careers.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Description(); ok {
		if err := careers.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Careers.description": %w`, err)}
		}
	}
	return nil
}

func (cuo *CareersUpdateOne) sqlSave(ctx context.Context) (_node *Careers, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(careers.Table, careers.Columns, sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Careers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, careers.FieldID)
		for _, f := range fields {
			if !careers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != careers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(careers.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(careers.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   careers.LeaderTable,
			Columns: []string{careers.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedLeaderIDs(); len(nodes) > 0 && !cuo.mutation.LeaderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   careers.LeaderTable,
			Columns: []string{careers.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.LeaderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   careers.LeaderTable,
			Columns: []string{careers.LeaderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   careers.StudentsTable,
			Columns: careers.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !cuo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   careers.StudentsTable,
			Columns: careers.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   careers.StudentsTable,
			Columns: careers.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Careers{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{careers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
