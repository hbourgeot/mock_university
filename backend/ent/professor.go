// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mocku/backend/ent/careers"
	"mocku/backend/ent/professor"
	"mocku/backend/ent/users"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Professor is the model entity for the Professor schema.
type Professor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IdentityCard holds the value of the "identity_card" field.
	IdentityCard string `json:"identity_card,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate time.Time `json:"birth_date,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfessorQuery when eager-loading is set.
	Edges                  ProfessorEdges `json:"edges"`
	careers_leader         *int
	professor_user         *int
	professor_subordinates *int
	selectValues           sql.SelectValues
}

// ProfessorEdges holds the relations/edges for other nodes in the graph.
type ProfessorEdges struct {
	// User holds the value of the user edge.
	User *Users `json:"user,omitempty"`
	// Boss holds the value of the boss edge.
	Boss *Professor `json:"boss,omitempty"`
	// Subordinates holds the value of the subordinates edge.
	Subordinates []*Professor `json:"subordinates,omitempty"`
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject `json:"subjects,omitempty"`
	// Careers holds the value of the careers edge.
	Careers *Careers `json:"careers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) UserOrErr() (*Users, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: users.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BossOrErr returns the Boss value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) BossOrErr() (*Professor, error) {
	if e.Boss != nil {
		return e.Boss, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: professor.Label}
	}
	return nil, &NotLoadedError{edge: "boss"}
}

// SubordinatesOrErr returns the Subordinates value or an error if the edge
// was not loaded in eager-loading.
func (e ProfessorEdges) SubordinatesOrErr() ([]*Professor, error) {
	if e.loadedTypes[2] {
		return e.Subordinates, nil
	}
	return nil, &NotLoadedError{edge: "subordinates"}
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e ProfessorEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[3] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// CareersOrErr returns the Careers value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) CareersOrErr() (*Careers, error) {
	if e.Careers != nil {
		return e.Careers, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: careers.Label}
	}
	return nil, &NotLoadedError{edge: "careers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Professor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case professor.FieldID:
			values[i] = new(sql.NullInt64)
		case professor.FieldIdentityCard, professor.FieldPhone, professor.FieldAddress:
			values[i] = new(sql.NullString)
		case professor.FieldBirthDate:
			values[i] = new(sql.NullTime)
		case professor.ForeignKeys[0]: // careers_leader
			values[i] = new(sql.NullInt64)
		case professor.ForeignKeys[1]: // professor_user
			values[i] = new(sql.NullInt64)
		case professor.ForeignKeys[2]: // professor_subordinates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Professor fields.
func (pr *Professor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case professor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case professor.FieldIdentityCard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identity_card", values[i])
			} else if value.Valid {
				pr.IdentityCard = value.String
			}
		case professor.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				pr.BirthDate = value.Time
			}
		case professor.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pr.Phone = value.String
			}
		case professor.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pr.Address = value.String
			}
		case professor.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field careers_leader", value)
			} else if value.Valid {
				pr.careers_leader = new(int)
				*pr.careers_leader = int(value.Int64)
			}
		case professor.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field professor_user", value)
			} else if value.Valid {
				pr.professor_user = new(int)
				*pr.professor_user = int(value.Int64)
			}
		case professor.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field professor_subordinates", value)
			} else if value.Valid {
				pr.professor_subordinates = new(int)
				*pr.professor_subordinates = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Professor.
// This includes values selected through modifiers, order, etc.
func (pr *Professor) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Professor entity.
func (pr *Professor) QueryUser() *UsersQuery {
	return NewProfessorClient(pr.config).QueryUser(pr)
}

// QueryBoss queries the "boss" edge of the Professor entity.
func (pr *Professor) QueryBoss() *ProfessorQuery {
	return NewProfessorClient(pr.config).QueryBoss(pr)
}

// QuerySubordinates queries the "subordinates" edge of the Professor entity.
func (pr *Professor) QuerySubordinates() *ProfessorQuery {
	return NewProfessorClient(pr.config).QuerySubordinates(pr)
}

// QuerySubjects queries the "subjects" edge of the Professor entity.
func (pr *Professor) QuerySubjects() *SubjectQuery {
	return NewProfessorClient(pr.config).QuerySubjects(pr)
}

// QueryCareers queries the "careers" edge of the Professor entity.
func (pr *Professor) QueryCareers() *CareersQuery {
	return NewProfessorClient(pr.config).QueryCareers(pr)
}

// Update returns a builder for updating this Professor.
// Note that you need to call Professor.Unwrap() before calling this method if this Professor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Professor) Update() *ProfessorUpdateOne {
	return NewProfessorClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Professor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Professor) Unwrap() *Professor {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Professor is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Professor) String() string {
	var builder strings.Builder
	builder.WriteString("Professor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("identity_card=")
	builder.WriteString(pr.IdentityCard)
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(pr.BirthDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pr.Phone)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(pr.Address)
	builder.WriteByte(')')
	return builder.String()
}

// Professors is a parsable slice of Professor.
type Professors []*Professor
