// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/careers"
	"mocku/backend/ent/note"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/professor"
	"mocku/backend/ent/subject"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SubjectUpdate) SetName(s string) *SubjectUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableName(s *string) *SubjectUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SubjectUpdate) SetDescription(s string) *SubjectUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableDescription(s *string) *SubjectUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetCreditUnits sets the "credit_units" field.
func (su *SubjectUpdate) SetCreditUnits(i int) *SubjectUpdate {
	su.mutation.ResetCreditUnits()
	su.mutation.SetCreditUnits(i)
	return su
}

// SetNillableCreditUnits sets the "credit_units" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableCreditUnits(i *int) *SubjectUpdate {
	if i != nil {
		su.SetCreditUnits(*i)
	}
	return su
}

// AddCreditUnits adds i to the "credit_units" field.
func (su *SubjectUpdate) AddCreditUnits(i int) *SubjectUpdate {
	su.mutation.AddCreditUnits(i)
	return su
}

// SetSemester sets the "semester" field.
func (su *SubjectUpdate) SetSemester(i int) *SubjectUpdate {
	su.mutation.ResetSemester()
	su.mutation.SetSemester(i)
	return su
}

// SetNillableSemester sets the "semester" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableSemester(i *int) *SubjectUpdate {
	if i != nil {
		su.SetSemester(*i)
	}
	return su
}

// AddSemester adds i to the "semester" field.
func (su *SubjectUpdate) AddSemester(i int) *SubjectUpdate {
	su.mutation.AddSemester(i)
	return su
}

// SetCode sets the "code" field.
func (su *SubjectUpdate) SetCode(s string) *SubjectUpdate {
	su.mutation.SetCode(s)
	return su
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableCode(s *string) *SubjectUpdate {
	if s != nil {
		su.SetCode(*s)
	}
	return su
}

// SetPracticeHours sets the "practice_hours" field.
func (su *SubjectUpdate) SetPracticeHours(i int) *SubjectUpdate {
	su.mutation.ResetPracticeHours()
	su.mutation.SetPracticeHours(i)
	return su
}

// SetNillablePracticeHours sets the "practice_hours" field if the given value is not nil.
func (su *SubjectUpdate) SetNillablePracticeHours(i *int) *SubjectUpdate {
	if i != nil {
		su.SetPracticeHours(*i)
	}
	return su
}

// AddPracticeHours adds i to the "practice_hours" field.
func (su *SubjectUpdate) AddPracticeHours(i int) *SubjectUpdate {
	su.mutation.AddPracticeHours(i)
	return su
}

// SetTheoryHours sets the "theory_hours" field.
func (su *SubjectUpdate) SetTheoryHours(i int) *SubjectUpdate {
	su.mutation.ResetTheoryHours()
	su.mutation.SetTheoryHours(i)
	return su
}

// SetNillableTheoryHours sets the "theory_hours" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableTheoryHours(i *int) *SubjectUpdate {
	if i != nil {
		su.SetTheoryHours(*i)
	}
	return su
}

// AddTheoryHours adds i to the "theory_hours" field.
func (su *SubjectUpdate) AddTheoryHours(i int) *SubjectUpdate {
	su.mutation.AddTheoryHours(i)
	return su
}

// SetLabHours sets the "lab_hours" field.
func (su *SubjectUpdate) SetLabHours(i int) *SubjectUpdate {
	su.mutation.ResetLabHours()
	su.mutation.SetLabHours(i)
	return su
}

// SetNillableLabHours sets the "lab_hours" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableLabHours(i *int) *SubjectUpdate {
	if i != nil {
		su.SetLabHours(*i)
	}
	return su
}

// AddLabHours adds i to the "lab_hours" field.
func (su *SubjectUpdate) AddLabHours(i int) *SubjectUpdate {
	su.mutation.AddLabHours(i)
	return su
}

// SetTotalHours sets the "total_hours" field.
func (su *SubjectUpdate) SetTotalHours(i int) *SubjectUpdate {
	su.mutation.ResetTotalHours()
	su.mutation.SetTotalHours(i)
	return su
}

// SetNillableTotalHours sets the "total_hours" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableTotalHours(i *int) *SubjectUpdate {
	if i != nil {
		su.SetTotalHours(*i)
	}
	return su
}

// AddTotalHours adds i to the "total_hours" field.
func (su *SubjectUpdate) AddTotalHours(i int) *SubjectUpdate {
	su.mutation.AddTotalHours(i)
	return su
}

// SetClassSchedule sets the "class_schedule" field.
func (su *SubjectUpdate) SetClassSchedule(m map[string][]string) *SubjectUpdate {
	su.mutation.SetClassSchedule(m)
	return su
}

// ClearClassSchedule clears the value of the "class_schedule" field.
func (su *SubjectUpdate) ClearClassSchedule() *SubjectUpdate {
	su.mutation.ClearClassSchedule()
	return su
}

// AddProfessorIDs adds the "professor" edge to the Professor entity by IDs.
func (su *SubjectUpdate) AddProfessorIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddProfessorIDs(ids...)
	return su
}

// AddProfessor adds the "professor" edges to the Professor entity.
func (su *SubjectUpdate) AddProfessor(p ...*Professor) *SubjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProfessorIDs(ids...)
}

// AddCareerIDs adds the "career" edge to the Careers entity by IDs.
func (su *SubjectUpdate) AddCareerIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddCareerIDs(ids...)
	return su
}

// AddCareer adds the "career" edges to the Careers entity.
func (su *SubjectUpdate) AddCareer(c ...*Careers) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCareerIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (su *SubjectUpdate) AddNoteIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddNoteIDs(ids...)
	return su
}

// AddNotes adds the "notes" edges to the Note entity.
func (su *SubjectUpdate) AddNotes(n ...*Note) *SubjectUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return su.AddNoteIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearProfessor clears all "professor" edges to the Professor entity.
func (su *SubjectUpdate) ClearProfessor() *SubjectUpdate {
	su.mutation.ClearProfessor()
	return su
}

// RemoveProfessorIDs removes the "professor" edge to Professor entities by IDs.
func (su *SubjectUpdate) RemoveProfessorIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveProfessorIDs(ids...)
	return su
}

// RemoveProfessor removes "professor" edges to Professor entities.
func (su *SubjectUpdate) RemoveProfessor(p ...*Professor) *SubjectUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProfessorIDs(ids...)
}

// ClearCareer clears all "career" edges to the Careers entity.
func (su *SubjectUpdate) ClearCareer() *SubjectUpdate {
	su.mutation.ClearCareer()
	return su
}

// RemoveCareerIDs removes the "career" edge to Careers entities by IDs.
func (su *SubjectUpdate) RemoveCareerIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveCareerIDs(ids...)
	return su
}

// RemoveCareer removes "career" edges to Careers entities.
func (su *SubjectUpdate) RemoveCareer(c ...*Careers) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCareerIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (su *SubjectUpdate) ClearNotes() *SubjectUpdate {
	su.mutation.ClearNotes()
	return su
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (su *SubjectUpdate) RemoveNoteIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveNoteIDs(ids...)
	return su
}

// RemoveNotes removes "notes" edges to Note entities.
func (su *SubjectUpdate) RemoveNotes(n ...*Note) *SubjectUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return su.RemoveNoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubjectUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Description(); ok {
		if err := subject.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subject.description": %w`, err)}
		}
	}
	if v, ok := su.mutation.CreditUnits(); ok {
		if err := subject.CreditUnitsValidator(v); err != nil {
			return &ValidationError{Name: "credit_units", err: fmt.Errorf(`ent: validator failed for field "Subject.credit_units": %w`, err)}
		}
	}
	if v, ok := su.mutation.Semester(); ok {
		if err := subject.SemesterValidator(v); err != nil {
			return &ValidationError{Name: "semester", err: fmt.Errorf(`ent: validator failed for field "Subject.semester": %w`, err)}
		}
	}
	if v, ok := su.mutation.Code(); ok {
		if err := subject.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Subject.code": %w`, err)}
		}
	}
	if v, ok := su.mutation.PracticeHours(); ok {
		if err := subject.PracticeHoursValidator(v); err != nil {
			return &ValidationError{Name: "practice_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.practice_hours": %w`, err)}
		}
	}
	if v, ok := su.mutation.TheoryHours(); ok {
		if err := subject.TheoryHoursValidator(v); err != nil {
			return &ValidationError{Name: "theory_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.theory_hours": %w`, err)}
		}
	}
	if v, ok := su.mutation.LabHours(); ok {
		if err := subject.LabHoursValidator(v); err != nil {
			return &ValidationError{Name: "lab_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.lab_hours": %w`, err)}
		}
	}
	if v, ok := su.mutation.TotalHours(); ok {
		if err := subject.TotalHoursValidator(v); err != nil {
			return &ValidationError{Name: "total_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.total_hours": %w`, err)}
		}
	}
	return nil
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subject.FieldDescription, field.TypeString, value)
	}
	if value, ok := su.mutation.CreditUnits(); ok {
		_spec.SetField(subject.FieldCreditUnits, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCreditUnits(); ok {
		_spec.AddField(subject.FieldCreditUnits, field.TypeInt, value)
	}
	if value, ok := su.mutation.Semester(); ok {
		_spec.SetField(subject.FieldSemester, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSemester(); ok {
		_spec.AddField(subject.FieldSemester, field.TypeInt, value)
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.SetField(subject.FieldCode, field.TypeString, value)
	}
	if value, ok := su.mutation.PracticeHours(); ok {
		_spec.SetField(subject.FieldPracticeHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPracticeHours(); ok {
		_spec.AddField(subject.FieldPracticeHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.TheoryHours(); ok {
		_spec.SetField(subject.FieldTheoryHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTheoryHours(); ok {
		_spec.AddField(subject.FieldTheoryHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.LabHours(); ok {
		_spec.SetField(subject.FieldLabHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedLabHours(); ok {
		_spec.AddField(subject.FieldLabHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.TotalHours(); ok {
		_spec.SetField(subject.FieldTotalHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTotalHours(); ok {
		_spec.AddField(subject.FieldTotalHours, field.TypeInt, value)
	}
	if value, ok := su.mutation.ClassSchedule(); ok {
		_spec.SetField(subject.FieldClassSchedule, field.TypeJSON, value)
	}
	if su.mutation.ClassScheduleCleared() {
		_spec.ClearField(subject.FieldClassSchedule, field.TypeJSON)
	}
	if su.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.ProfessorTable,
			Columns: subject.ProfessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProfessorIDs(); len(nodes) > 0 && !su.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.ProfessorTable,
			Columns: subject.ProfessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProfessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.ProfessorTable,
			Columns: subject.ProfessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CareerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CareerTable,
			Columns: []string{subject.CareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCareerIDs(); len(nodes) > 0 && !su.mutation.CareerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CareerTable,
			Columns: []string{subject.CareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CareerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CareerTable,
			Columns: []string{subject.CareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.NotesTable,
			Columns: subject.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedNotesIDs(); len(nodes) > 0 && !su.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.NotesTable,
			Columns: subject.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.NotesTable,
			Columns: subject.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetName sets the "name" field.
func (suo *SubjectUpdateOne) SetName(s string) *SubjectUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableName(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubjectUpdateOne) SetDescription(s string) *SubjectUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableDescription(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetCreditUnits sets the "credit_units" field.
func (suo *SubjectUpdateOne) SetCreditUnits(i int) *SubjectUpdateOne {
	suo.mutation.ResetCreditUnits()
	suo.mutation.SetCreditUnits(i)
	return suo
}

// SetNillableCreditUnits sets the "credit_units" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableCreditUnits(i *int) *SubjectUpdateOne {
	if i != nil {
		suo.SetCreditUnits(*i)
	}
	return suo
}

// AddCreditUnits adds i to the "credit_units" field.
func (suo *SubjectUpdateOne) AddCreditUnits(i int) *SubjectUpdateOne {
	suo.mutation.AddCreditUnits(i)
	return suo
}

// SetSemester sets the "semester" field.
func (suo *SubjectUpdateOne) SetSemester(i int) *SubjectUpdateOne {
	suo.mutation.ResetSemester()
	suo.mutation.SetSemester(i)
	return suo
}

// SetNillableSemester sets the "semester" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableSemester(i *int) *SubjectUpdateOne {
	if i != nil {
		suo.SetSemester(*i)
	}
	return suo
}

// AddSemester adds i to the "semester" field.
func (suo *SubjectUpdateOne) AddSemester(i int) *SubjectUpdateOne {
	suo.mutation.AddSemester(i)
	return suo
}

// SetCode sets the "code" field.
func (suo *SubjectUpdateOne) SetCode(s string) *SubjectUpdateOne {
	suo.mutation.SetCode(s)
	return suo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableCode(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetCode(*s)
	}
	return suo
}

// SetPracticeHours sets the "practice_hours" field.
func (suo *SubjectUpdateOne) SetPracticeHours(i int) *SubjectUpdateOne {
	suo.mutation.ResetPracticeHours()
	suo.mutation.SetPracticeHours(i)
	return suo
}

// SetNillablePracticeHours sets the "practice_hours" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillablePracticeHours(i *int) *SubjectUpdateOne {
	if i != nil {
		suo.SetPracticeHours(*i)
	}
	return suo
}

// AddPracticeHours adds i to the "practice_hours" field.
func (suo *SubjectUpdateOne) AddPracticeHours(i int) *SubjectUpdateOne {
	suo.mutation.AddPracticeHours(i)
	return suo
}

// SetTheoryHours sets the "theory_hours" field.
func (suo *SubjectUpdateOne) SetTheoryHours(i int) *SubjectUpdateOne {
	suo.mutation.ResetTheoryHours()
	suo.mutation.SetTheoryHours(i)
	return suo
}

// SetNillableTheoryHours sets the "theory_hours" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableTheoryHours(i *int) *SubjectUpdateOne {
	if i != nil {
		suo.SetTheoryHours(*i)
	}
	return suo
}

// AddTheoryHours adds i to the "theory_hours" field.
func (suo *SubjectUpdateOne) AddTheoryHours(i int) *SubjectUpdateOne {
	suo.mutation.AddTheoryHours(i)
	return suo
}

// SetLabHours sets the "lab_hours" field.
func (suo *SubjectUpdateOne) SetLabHours(i int) *SubjectUpdateOne {
	suo.mutation.ResetLabHours()
	suo.mutation.SetLabHours(i)
	return suo
}

// SetNillableLabHours sets the "lab_hours" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableLabHours(i *int) *SubjectUpdateOne {
	if i != nil {
		suo.SetLabHours(*i)
	}
	return suo
}

// AddLabHours adds i to the "lab_hours" field.
func (suo *SubjectUpdateOne) AddLabHours(i int) *SubjectUpdateOne {
	suo.mutation.AddLabHours(i)
	return suo
}

// SetTotalHours sets the "total_hours" field.
func (suo *SubjectUpdateOne) SetTotalHours(i int) *SubjectUpdateOne {
	suo.mutation.ResetTotalHours()
	suo.mutation.SetTotalHours(i)
	return suo
}

// SetNillableTotalHours sets the "total_hours" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableTotalHours(i *int) *SubjectUpdateOne {
	if i != nil {
		suo.SetTotalHours(*i)
	}
	return suo
}

// AddTotalHours adds i to the "total_hours" field.
func (suo *SubjectUpdateOne) AddTotalHours(i int) *SubjectUpdateOne {
	suo.mutation.AddTotalHours(i)
	return suo
}

// SetClassSchedule sets the "class_schedule" field.
func (suo *SubjectUpdateOne) SetClassSchedule(m map[string][]string) *SubjectUpdateOne {
	suo.mutation.SetClassSchedule(m)
	return suo
}

// ClearClassSchedule clears the value of the "class_schedule" field.
func (suo *SubjectUpdateOne) ClearClassSchedule() *SubjectUpdateOne {
	suo.mutation.ClearClassSchedule()
	return suo
}

// AddProfessorIDs adds the "professor" edge to the Professor entity by IDs.
func (suo *SubjectUpdateOne) AddProfessorIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddProfessorIDs(ids...)
	return suo
}

// AddProfessor adds the "professor" edges to the Professor entity.
func (suo *SubjectUpdateOne) AddProfessor(p ...*Professor) *SubjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProfessorIDs(ids...)
}

// AddCareerIDs adds the "career" edge to the Careers entity by IDs.
func (suo *SubjectUpdateOne) AddCareerIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddCareerIDs(ids...)
	return suo
}

// AddCareer adds the "career" edges to the Careers entity.
func (suo *SubjectUpdateOne) AddCareer(c ...*Careers) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCareerIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (suo *SubjectUpdateOne) AddNoteIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddNoteIDs(ids...)
	return suo
}

// AddNotes adds the "notes" edges to the Note entity.
func (suo *SubjectUpdateOne) AddNotes(n ...*Note) *SubjectUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suo.AddNoteIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearProfessor clears all "professor" edges to the Professor entity.
func (suo *SubjectUpdateOne) ClearProfessor() *SubjectUpdateOne {
	suo.mutation.ClearProfessor()
	return suo
}

// RemoveProfessorIDs removes the "professor" edge to Professor entities by IDs.
func (suo *SubjectUpdateOne) RemoveProfessorIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveProfessorIDs(ids...)
	return suo
}

// RemoveProfessor removes "professor" edges to Professor entities.
func (suo *SubjectUpdateOne) RemoveProfessor(p ...*Professor) *SubjectUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProfessorIDs(ids...)
}

// ClearCareer clears all "career" edges to the Careers entity.
func (suo *SubjectUpdateOne) ClearCareer() *SubjectUpdateOne {
	suo.mutation.ClearCareer()
	return suo
}

// RemoveCareerIDs removes the "career" edge to Careers entities by IDs.
func (suo *SubjectUpdateOne) RemoveCareerIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveCareerIDs(ids...)
	return suo
}

// RemoveCareer removes "career" edges to Careers entities.
func (suo *SubjectUpdateOne) RemoveCareer(c ...*Careers) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCareerIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (suo *SubjectUpdateOne) ClearNotes() *SubjectUpdateOne {
	suo.mutation.ClearNotes()
	return suo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (suo *SubjectUpdateOne) RemoveNoteIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveNoteIDs(ids...)
	return suo
}

// RemoveNotes removes "notes" edges to Note entities.
func (suo *SubjectUpdateOne) RemoveNotes(n ...*Note) *SubjectUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suo.RemoveNoteIDs(ids...)
}

// Where appends a list predicates to the SubjectUpdate builder.
func (suo *SubjectUpdateOne) Where(ps ...predicate.Subject) *SubjectUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubjectUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Description(); ok {
		if err := subject.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subject.description": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CreditUnits(); ok {
		if err := subject.CreditUnitsValidator(v); err != nil {
			return &ValidationError{Name: "credit_units", err: fmt.Errorf(`ent: validator failed for field "Subject.credit_units": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Semester(); ok {
		if err := subject.SemesterValidator(v); err != nil {
			return &ValidationError{Name: "semester", err: fmt.Errorf(`ent: validator failed for field "Subject.semester": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Code(); ok {
		if err := subject.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Subject.code": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PracticeHours(); ok {
		if err := subject.PracticeHoursValidator(v); err != nil {
			return &ValidationError{Name: "practice_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.practice_hours": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TheoryHours(); ok {
		if err := subject.TheoryHoursValidator(v); err != nil {
			return &ValidationError{Name: "theory_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.theory_hours": %w`, err)}
		}
	}
	if v, ok := suo.mutation.LabHours(); ok {
		if err := subject.LabHoursValidator(v); err != nil {
			return &ValidationError{Name: "lab_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.lab_hours": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TotalHours(); ok {
		if err := subject.TotalHoursValidator(v); err != nil {
			return &ValidationError{Name: "total_hours", err: fmt.Errorf(`ent: validator failed for field "Subject.total_hours": %w`, err)}
		}
	}
	return nil
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subject.Table, subject.Columns, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subject.FieldDescription, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreditUnits(); ok {
		_spec.SetField(subject.FieldCreditUnits, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCreditUnits(); ok {
		_spec.AddField(subject.FieldCreditUnits, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Semester(); ok {
		_spec.SetField(subject.FieldSemester, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSemester(); ok {
		_spec.AddField(subject.FieldSemester, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.SetField(subject.FieldCode, field.TypeString, value)
	}
	if value, ok := suo.mutation.PracticeHours(); ok {
		_spec.SetField(subject.FieldPracticeHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPracticeHours(); ok {
		_spec.AddField(subject.FieldPracticeHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.TheoryHours(); ok {
		_spec.SetField(subject.FieldTheoryHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTheoryHours(); ok {
		_spec.AddField(subject.FieldTheoryHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.LabHours(); ok {
		_spec.SetField(subject.FieldLabHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedLabHours(); ok {
		_spec.AddField(subject.FieldLabHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.TotalHours(); ok {
		_spec.SetField(subject.FieldTotalHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTotalHours(); ok {
		_spec.AddField(subject.FieldTotalHours, field.TypeInt, value)
	}
	if value, ok := suo.mutation.ClassSchedule(); ok {
		_spec.SetField(subject.FieldClassSchedule, field.TypeJSON, value)
	}
	if suo.mutation.ClassScheduleCleared() {
		_spec.ClearField(subject.FieldClassSchedule, field.TypeJSON)
	}
	if suo.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.ProfessorTable,
			Columns: subject.ProfessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProfessorIDs(); len(nodes) > 0 && !suo.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.ProfessorTable,
			Columns: subject.ProfessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProfessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.ProfessorTable,
			Columns: subject.ProfessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CareerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CareerTable,
			Columns: []string{subject.CareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCareerIDs(); len(nodes) > 0 && !suo.mutation.CareerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CareerTable,
			Columns: []string{subject.CareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CareerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CareerTable,
			Columns: []string{subject.CareerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.NotesTable,
			Columns: subject.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !suo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.NotesTable,
			Columns: subject.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.NotesTable,
			Columns: subject.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
