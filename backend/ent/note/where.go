// Code generated by ent, DO NOT EDIT.

package note

import (
	"mocku/backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldID, id))
}

// Average applies equality check predicate on the "average" field. It's identical to AverageEQ.
func Average(v float32) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldAverage, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldNotes))
}

// AverageEQ applies the EQ predicate on the "average" field.
func AverageEQ(v float32) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldAverage, v))
}

// AverageNEQ applies the NEQ predicate on the "average" field.
func AverageNEQ(v float32) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldAverage, v))
}

// AverageIn applies the In predicate on the "average" field.
func AverageIn(vs ...float32) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldAverage, vs...))
}

// AverageNotIn applies the NotIn predicate on the "average" field.
func AverageNotIn(vs ...float32) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldAverage, vs...))
}

// AverageGT applies the GT predicate on the "average" field.
func AverageGT(v float32) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldAverage, v))
}

// AverageGTE applies the GTE predicate on the "average" field.
func AverageGTE(v float32) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldAverage, v))
}

// AverageLT applies the LT predicate on the "average" field.
func AverageLT(v float32) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldAverage, v))
}

// AverageLTE applies the LTE predicate on the "average" field.
func AverageLTE(v float32) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldAverage, v))
}

// AverageIsNil applies the IsNil predicate on the "average" field.
func AverageIsNil() predicate.Note {
	return predicate.Note(sql.FieldIsNull(FieldAverage))
}

// AverageNotNil applies the NotNil predicate on the "average" field.
func AverageNotNil() predicate.Note {
	return predicate.Note(sql.FieldNotNull(FieldAverage))
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, StudentTable, StudentPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := newStudentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SubjectTable, SubjectPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := newSubjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCycle applies the HasEdge predicate on the "cycle" edge.
func HasCycle() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CycleTable, CycleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCycleWith applies the HasEdge predicate on the "cycle" edge with a given conditions (other predicates).
func HasCycleWith(preds ...predicate.Cycle) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := newCycleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Note) predicate.Note {
	return predicate.Note(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Note) predicate.Note {
	return predicate.Note(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Note) predicate.Note {
	return predicate.Note(sql.NotPredicates(p))
}
