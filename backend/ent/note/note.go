// Code generated by ent, DO NOT EDIT.

package note

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the note type in the database.
	Label = "note"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldAverage holds the string denoting the average field in the database.
	FieldAverage = "average"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeProfessor holds the string denoting the professor edge name in mutations.
	EdgeProfessor = "professor"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeCycle holds the string denoting the cycle edge name in mutations.
	EdgeCycle = "cycle"
	// Table holds the table name of the note in the database.
	Table = "notes"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "students"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "note_student"
	// ProfessorTable is the table that holds the professor relation/edge.
	ProfessorTable = "professors"
	// ProfessorInverseTable is the table name for the Professor entity.
	// It exists in this package in order to avoid circular dependency with the "professor" package.
	ProfessorInverseTable = "professors"
	// ProfessorColumn is the table column denoting the professor relation/edge.
	ProfessorColumn = "note_professor"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "subjects"
	// SubjectInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectInverseTable = "subjects"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "note_subject"
	// CycleTable is the table that holds the cycle relation/edge.
	CycleTable = "cycles"
	// CycleInverseTable is the table name for the Cycle entity.
	// It exists in this package in order to avoid circular dependency with the "cycle" package.
	CycleInverseTable = "cycles"
	// CycleColumn is the table column denoting the cycle relation/edge.
	CycleColumn = "note_cycle"
)

// Columns holds all SQL columns for note fields.
var Columns = []string{
	FieldID,
	FieldNotes,
	FieldAverage,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Note queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAverage orders the results by the average field.
func ByAverage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverage, opts...).ToFunc()
}

// ByStudentCount orders the results by student count.
func ByStudentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStudentStep(), opts...)
	}
}

// ByStudent orders the results by student terms.
func ByStudent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfessorCount orders the results by professor count.
func ByProfessorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProfessorStep(), opts...)
	}
}

// ByProfessor orders the results by professor terms.
func ByProfessor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfessorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubjectCount orders the results by subject count.
func BySubjectCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubjectStep(), opts...)
	}
}

// BySubject orders the results by subject terms.
func BySubject(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCycleCount orders the results by cycle count.
func ByCycleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCycleStep(), opts...)
	}
}

// ByCycle orders the results by cycle terms.
func ByCycle(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCycleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStudentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StudentTable, StudentColumn),
	)
}
func newProfessorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfessorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProfessorTable, ProfessorColumn),
	)
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubjectTable, SubjectColumn),
	)
}
func newCycleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CycleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CycleTable, CycleColumn),
	)
}
