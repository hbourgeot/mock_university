// Code generated by ent, DO NOT EDIT.

package note

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the note type in the database.
	Label = "note"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldAverage holds the string denoting the average field in the database.
	FieldAverage = "average"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeCycle holds the string denoting the cycle edge name in mutations.
	EdgeCycle = "cycle"
	// Table holds the table name of the note in the database.
	Table = "notes"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "notes"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "note_student"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "notes"
	// SubjectInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectInverseTable = "subjects"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "note_subject"
	// CycleTable is the table that holds the cycle relation/edge.
	CycleTable = "notes"
	// CycleInverseTable is the table name for the Cycle entity.
	// It exists in this package in order to avoid circular dependency with the "cycle" package.
	CycleInverseTable = "cycles"
	// CycleColumn is the table column denoting the cycle relation/edge.
	CycleColumn = "note_cycle"
)

// Columns holds all SQL columns for note fields.
var Columns = []string{
	FieldID,
	FieldNotes,
	FieldAverage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"note_student",
	"note_subject",
	"note_cycle",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Note queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAverage orders the results by the average field.
func ByAverage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverage, opts...).ToFunc()
}

// ByStudentField orders the results by student field.
func ByStudentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStudentStep(), sql.OrderByField(field, opts...))
	}
}

// BySubjectField orders the results by subject field.
func BySubjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByCycleField orders the results by cycle field.
func ByCycleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCycleStep(), sql.OrderByField(field, opts...))
	}
}
func newStudentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StudentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StudentTable, StudentColumn),
	)
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
	)
}
func newCycleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CycleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CycleTable, CycleColumn),
	)
}
