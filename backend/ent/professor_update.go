// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/careers"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/professor"
	"mocku/backend/ent/subject"
	"mocku/backend/ent/users"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfessorUpdate is the builder for updating Professor entities.
type ProfessorUpdate struct {
	config
	hooks    []Hook
	mutation *ProfessorMutation
}

// Where appends a list predicates to the ProfessorUpdate builder.
func (pu *ProfessorUpdate) Where(ps ...predicate.Professor) *ProfessorUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetIdentityCard sets the "identity_card" field.
func (pu *ProfessorUpdate) SetIdentityCard(s string) *ProfessorUpdate {
	pu.mutation.SetIdentityCard(s)
	return pu
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (pu *ProfessorUpdate) SetNillableIdentityCard(s *string) *ProfessorUpdate {
	if s != nil {
		pu.SetIdentityCard(*s)
	}
	return pu
}

// SetBirthDate sets the "birth_date" field.
func (pu *ProfessorUpdate) SetBirthDate(t time.Time) *ProfessorUpdate {
	pu.mutation.SetBirthDate(t)
	return pu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (pu *ProfessorUpdate) SetNillableBirthDate(t *time.Time) *ProfessorUpdate {
	if t != nil {
		pu.SetBirthDate(*t)
	}
	return pu
}

// SetPhone sets the "phone" field.
func (pu *ProfessorUpdate) SetPhone(s string) *ProfessorUpdate {
	pu.mutation.SetPhone(s)
	return pu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (pu *ProfessorUpdate) SetNillablePhone(s *string) *ProfessorUpdate {
	if s != nil {
		pu.SetPhone(*s)
	}
	return pu
}

// SetAddress sets the "address" field.
func (pu *ProfessorUpdate) SetAddress(s string) *ProfessorUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (pu *ProfessorUpdate) SetNillableAddress(s *string) *ProfessorUpdate {
	if s != nil {
		pu.SetAddress(*s)
	}
	return pu
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (pu *ProfessorUpdate) SetUserID(id int) *ProfessorUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (pu *ProfessorUpdate) SetNillableUserID(id *int) *ProfessorUpdate {
	if id != nil {
		pu = pu.SetUserID(*id)
	}
	return pu
}

// SetUser sets the "user" edge to the Users entity.
func (pu *ProfessorUpdate) SetUser(u *Users) *ProfessorUpdate {
	return pu.SetUserID(u.ID)
}

// SetBossID sets the "boss" edge to the Professor entity by ID.
func (pu *ProfessorUpdate) SetBossID(id int) *ProfessorUpdate {
	pu.mutation.SetBossID(id)
	return pu
}

// SetNillableBossID sets the "boss" edge to the Professor entity by ID if the given value is not nil.
func (pu *ProfessorUpdate) SetNillableBossID(id *int) *ProfessorUpdate {
	if id != nil {
		pu = pu.SetBossID(*id)
	}
	return pu
}

// SetBoss sets the "boss" edge to the Professor entity.
func (pu *ProfessorUpdate) SetBoss(p *Professor) *ProfessorUpdate {
	return pu.SetBossID(p.ID)
}

// AddSubordinateIDs adds the "subordinates" edge to the Professor entity by IDs.
func (pu *ProfessorUpdate) AddSubordinateIDs(ids ...int) *ProfessorUpdate {
	pu.mutation.AddSubordinateIDs(ids...)
	return pu
}

// AddSubordinates adds the "subordinates" edges to the Professor entity.
func (pu *ProfessorUpdate) AddSubordinates(p ...*Professor) *ProfessorUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddSubordinateIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (pu *ProfessorUpdate) AddSubjectIDs(ids ...int) *ProfessorUpdate {
	pu.mutation.AddSubjectIDs(ids...)
	return pu
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (pu *ProfessorUpdate) AddSubjects(s ...*Subject) *ProfessorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSubjectIDs(ids...)
}

// SetCareersID sets the "careers" edge to the Careers entity by ID.
func (pu *ProfessorUpdate) SetCareersID(id int) *ProfessorUpdate {
	pu.mutation.SetCareersID(id)
	return pu
}

// SetNillableCareersID sets the "careers" edge to the Careers entity by ID if the given value is not nil.
func (pu *ProfessorUpdate) SetNillableCareersID(id *int) *ProfessorUpdate {
	if id != nil {
		pu = pu.SetCareersID(*id)
	}
	return pu
}

// SetCareers sets the "careers" edge to the Careers entity.
func (pu *ProfessorUpdate) SetCareers(c *Careers) *ProfessorUpdate {
	return pu.SetCareersID(c.ID)
}

// Mutation returns the ProfessorMutation object of the builder.
func (pu *ProfessorUpdate) Mutation() *ProfessorMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (pu *ProfessorUpdate) ClearUser() *ProfessorUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearBoss clears the "boss" edge to the Professor entity.
func (pu *ProfessorUpdate) ClearBoss() *ProfessorUpdate {
	pu.mutation.ClearBoss()
	return pu
}

// ClearSubordinates clears all "subordinates" edges to the Professor entity.
func (pu *ProfessorUpdate) ClearSubordinates() *ProfessorUpdate {
	pu.mutation.ClearSubordinates()
	return pu
}

// RemoveSubordinateIDs removes the "subordinates" edge to Professor entities by IDs.
func (pu *ProfessorUpdate) RemoveSubordinateIDs(ids ...int) *ProfessorUpdate {
	pu.mutation.RemoveSubordinateIDs(ids...)
	return pu
}

// RemoveSubordinates removes "subordinates" edges to Professor entities.
func (pu *ProfessorUpdate) RemoveSubordinates(p ...*Professor) *ProfessorUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveSubordinateIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (pu *ProfessorUpdate) ClearSubjects() *ProfessorUpdate {
	pu.mutation.ClearSubjects()
	return pu
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (pu *ProfessorUpdate) RemoveSubjectIDs(ids ...int) *ProfessorUpdate {
	pu.mutation.RemoveSubjectIDs(ids...)
	return pu
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (pu *ProfessorUpdate) RemoveSubjects(s ...*Subject) *ProfessorUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSubjectIDs(ids...)
}

// ClearCareers clears the "careers" edge to the Careers entity.
func (pu *ProfessorUpdate) ClearCareers() *ProfessorUpdate {
	pu.mutation.ClearCareers()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfessorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfessorUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfessorUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfessorUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfessorUpdate) check() error {
	if v, ok := pu.mutation.IdentityCard(); ok {
		if err := professor.IdentityCardValidator(v); err != nil {
			return &ValidationError{Name: "identity_card", err: fmt.Errorf(`ent: validator failed for field "Professor.identity_card": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Phone(); ok {
		if err := professor.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Professor.phone": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Address(); ok {
		if err := professor.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Professor.address": %w`, err)}
		}
	}
	return nil
}

func (pu *ProfessorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(professor.Table, professor.Columns, sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.IdentityCard(); ok {
		_spec.SetField(professor.FieldIdentityCard, field.TypeString, value)
	}
	if value, ok := pu.mutation.BirthDate(); ok {
		_spec.SetField(professor.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Phone(); ok {
		_spec.SetField(professor.FieldPhone, field.TypeString, value)
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.SetField(professor.FieldAddress, field.TypeString, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   professor.UserTable,
			Columns: []string{professor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   professor.UserTable,
			Columns: []string{professor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BossCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.BossTable,
			Columns: []string{professor.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BossIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.BossTable,
			Columns: []string{professor.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubordinatesIDs(); len(nodes) > 0 && !pu.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: professor.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !pu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: professor.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: professor.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.CareersTable,
			Columns: []string{professor.CareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.CareersTable,
			Columns: []string{professor.CareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{professor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfessorUpdateOne is the builder for updating a single Professor entity.
type ProfessorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfessorMutation
}

// SetIdentityCard sets the "identity_card" field.
func (puo *ProfessorUpdateOne) SetIdentityCard(s string) *ProfessorUpdateOne {
	puo.mutation.SetIdentityCard(s)
	return puo
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillableIdentityCard(s *string) *ProfessorUpdateOne {
	if s != nil {
		puo.SetIdentityCard(*s)
	}
	return puo
}

// SetBirthDate sets the "birth_date" field.
func (puo *ProfessorUpdateOne) SetBirthDate(t time.Time) *ProfessorUpdateOne {
	puo.mutation.SetBirthDate(t)
	return puo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillableBirthDate(t *time.Time) *ProfessorUpdateOne {
	if t != nil {
		puo.SetBirthDate(*t)
	}
	return puo
}

// SetPhone sets the "phone" field.
func (puo *ProfessorUpdateOne) SetPhone(s string) *ProfessorUpdateOne {
	puo.mutation.SetPhone(s)
	return puo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillablePhone(s *string) *ProfessorUpdateOne {
	if s != nil {
		puo.SetPhone(*s)
	}
	return puo
}

// SetAddress sets the "address" field.
func (puo *ProfessorUpdateOne) SetAddress(s string) *ProfessorUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillableAddress(s *string) *ProfessorUpdateOne {
	if s != nil {
		puo.SetAddress(*s)
	}
	return puo
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (puo *ProfessorUpdateOne) SetUserID(id int) *ProfessorUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillableUserID(id *int) *ProfessorUpdateOne {
	if id != nil {
		puo = puo.SetUserID(*id)
	}
	return puo
}

// SetUser sets the "user" edge to the Users entity.
func (puo *ProfessorUpdateOne) SetUser(u *Users) *ProfessorUpdateOne {
	return puo.SetUserID(u.ID)
}

// SetBossID sets the "boss" edge to the Professor entity by ID.
func (puo *ProfessorUpdateOne) SetBossID(id int) *ProfessorUpdateOne {
	puo.mutation.SetBossID(id)
	return puo
}

// SetNillableBossID sets the "boss" edge to the Professor entity by ID if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillableBossID(id *int) *ProfessorUpdateOne {
	if id != nil {
		puo = puo.SetBossID(*id)
	}
	return puo
}

// SetBoss sets the "boss" edge to the Professor entity.
func (puo *ProfessorUpdateOne) SetBoss(p *Professor) *ProfessorUpdateOne {
	return puo.SetBossID(p.ID)
}

// AddSubordinateIDs adds the "subordinates" edge to the Professor entity by IDs.
func (puo *ProfessorUpdateOne) AddSubordinateIDs(ids ...int) *ProfessorUpdateOne {
	puo.mutation.AddSubordinateIDs(ids...)
	return puo
}

// AddSubordinates adds the "subordinates" edges to the Professor entity.
func (puo *ProfessorUpdateOne) AddSubordinates(p ...*Professor) *ProfessorUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddSubordinateIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (puo *ProfessorUpdateOne) AddSubjectIDs(ids ...int) *ProfessorUpdateOne {
	puo.mutation.AddSubjectIDs(ids...)
	return puo
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (puo *ProfessorUpdateOne) AddSubjects(s ...*Subject) *ProfessorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSubjectIDs(ids...)
}

// SetCareersID sets the "careers" edge to the Careers entity by ID.
func (puo *ProfessorUpdateOne) SetCareersID(id int) *ProfessorUpdateOne {
	puo.mutation.SetCareersID(id)
	return puo
}

// SetNillableCareersID sets the "careers" edge to the Careers entity by ID if the given value is not nil.
func (puo *ProfessorUpdateOne) SetNillableCareersID(id *int) *ProfessorUpdateOne {
	if id != nil {
		puo = puo.SetCareersID(*id)
	}
	return puo
}

// SetCareers sets the "careers" edge to the Careers entity.
func (puo *ProfessorUpdateOne) SetCareers(c *Careers) *ProfessorUpdateOne {
	return puo.SetCareersID(c.ID)
}

// Mutation returns the ProfessorMutation object of the builder.
func (puo *ProfessorUpdateOne) Mutation() *ProfessorMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (puo *ProfessorUpdateOne) ClearUser() *ProfessorUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearBoss clears the "boss" edge to the Professor entity.
func (puo *ProfessorUpdateOne) ClearBoss() *ProfessorUpdateOne {
	puo.mutation.ClearBoss()
	return puo
}

// ClearSubordinates clears all "subordinates" edges to the Professor entity.
func (puo *ProfessorUpdateOne) ClearSubordinates() *ProfessorUpdateOne {
	puo.mutation.ClearSubordinates()
	return puo
}

// RemoveSubordinateIDs removes the "subordinates" edge to Professor entities by IDs.
func (puo *ProfessorUpdateOne) RemoveSubordinateIDs(ids ...int) *ProfessorUpdateOne {
	puo.mutation.RemoveSubordinateIDs(ids...)
	return puo
}

// RemoveSubordinates removes "subordinates" edges to Professor entities.
func (puo *ProfessorUpdateOne) RemoveSubordinates(p ...*Professor) *ProfessorUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveSubordinateIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (puo *ProfessorUpdateOne) ClearSubjects() *ProfessorUpdateOne {
	puo.mutation.ClearSubjects()
	return puo
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (puo *ProfessorUpdateOne) RemoveSubjectIDs(ids ...int) *ProfessorUpdateOne {
	puo.mutation.RemoveSubjectIDs(ids...)
	return puo
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (puo *ProfessorUpdateOne) RemoveSubjects(s ...*Subject) *ProfessorUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSubjectIDs(ids...)
}

// ClearCareers clears the "careers" edge to the Careers entity.
func (puo *ProfessorUpdateOne) ClearCareers() *ProfessorUpdateOne {
	puo.mutation.ClearCareers()
	return puo
}

// Where appends a list predicates to the ProfessorUpdate builder.
func (puo *ProfessorUpdateOne) Where(ps ...predicate.Professor) *ProfessorUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfessorUpdateOne) Select(field string, fields ...string) *ProfessorUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Professor entity.
func (puo *ProfessorUpdateOne) Save(ctx context.Context) (*Professor, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfessorUpdateOne) SaveX(ctx context.Context) *Professor {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfessorUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfessorUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfessorUpdateOne) check() error {
	if v, ok := puo.mutation.IdentityCard(); ok {
		if err := professor.IdentityCardValidator(v); err != nil {
			return &ValidationError{Name: "identity_card", err: fmt.Errorf(`ent: validator failed for field "Professor.identity_card": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Phone(); ok {
		if err := professor.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Professor.phone": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Address(); ok {
		if err := professor.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Professor.address": %w`, err)}
		}
	}
	return nil
}

func (puo *ProfessorUpdateOne) sqlSave(ctx context.Context) (_node *Professor, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(professor.Table, professor.Columns, sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Professor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, professor.FieldID)
		for _, f := range fields {
			if !professor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != professor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.IdentityCard(); ok {
		_spec.SetField(professor.FieldIdentityCard, field.TypeString, value)
	}
	if value, ok := puo.mutation.BirthDate(); ok {
		_spec.SetField(professor.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Phone(); ok {
		_spec.SetField(professor.FieldPhone, field.TypeString, value)
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.SetField(professor.FieldAddress, field.TypeString, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   professor.UserTable,
			Columns: []string{professor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   professor.UserTable,
			Columns: []string{professor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BossCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.BossTable,
			Columns: []string{professor.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BossIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.BossTable,
			Columns: []string{professor.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubordinatesIDs(); len(nodes) > 0 && !puo.mutation.SubordinatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: professor.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !puo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: professor.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: professor.SubjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CareersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.CareersTable,
			Columns: []string{professor.CareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.CareersTable,
			Columns: []string{professor.CareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Professor{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{professor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
