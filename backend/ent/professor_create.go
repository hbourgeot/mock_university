// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/careers"
	"mocku/backend/ent/professor"
	"mocku/backend/ent/subject"
	"mocku/backend/ent/users"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProfessorCreate is the builder for creating a Professor entity.
type ProfessorCreate struct {
	config
	mutation *ProfessorMutation
	hooks    []Hook
}

// SetIdentityCard sets the "identity_card" field.
func (pc *ProfessorCreate) SetIdentityCard(s string) *ProfessorCreate {
	pc.mutation.SetIdentityCard(s)
	return pc
}

// SetBirthDate sets the "birth_date" field.
func (pc *ProfessorCreate) SetBirthDate(t time.Time) *ProfessorCreate {
	pc.mutation.SetBirthDate(t)
	return pc
}

// SetPhone sets the "phone" field.
func (pc *ProfessorCreate) SetPhone(s string) *ProfessorCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetAddress sets the "address" field.
func (pc *ProfessorCreate) SetAddress(s string) *ProfessorCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (pc *ProfessorCreate) SetUserID(id int) *ProfessorCreate {
	pc.mutation.SetUserID(id)
	return pc
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (pc *ProfessorCreate) SetNillableUserID(id *int) *ProfessorCreate {
	if id != nil {
		pc = pc.SetUserID(*id)
	}
	return pc
}

// SetUser sets the "user" edge to the Users entity.
func (pc *ProfessorCreate) SetUser(u *Users) *ProfessorCreate {
	return pc.SetUserID(u.ID)
}

// SetBossID sets the "boss" edge to the Professor entity by ID.
func (pc *ProfessorCreate) SetBossID(id int) *ProfessorCreate {
	pc.mutation.SetBossID(id)
	return pc
}

// SetNillableBossID sets the "boss" edge to the Professor entity by ID if the given value is not nil.
func (pc *ProfessorCreate) SetNillableBossID(id *int) *ProfessorCreate {
	if id != nil {
		pc = pc.SetBossID(*id)
	}
	return pc
}

// SetBoss sets the "boss" edge to the Professor entity.
func (pc *ProfessorCreate) SetBoss(p *Professor) *ProfessorCreate {
	return pc.SetBossID(p.ID)
}

// AddSubordinateIDs adds the "subordinates" edge to the Professor entity by IDs.
func (pc *ProfessorCreate) AddSubordinateIDs(ids ...int) *ProfessorCreate {
	pc.mutation.AddSubordinateIDs(ids...)
	return pc
}

// AddSubordinates adds the "subordinates" edges to the Professor entity.
func (pc *ProfessorCreate) AddSubordinates(p ...*Professor) *ProfessorCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddSubordinateIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (pc *ProfessorCreate) AddSubjectIDs(ids ...int) *ProfessorCreate {
	pc.mutation.AddSubjectIDs(ids...)
	return pc
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (pc *ProfessorCreate) AddSubjects(s ...*Subject) *ProfessorCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubjectIDs(ids...)
}

// AddCareerIDs adds the "careers" edge to the Careers entity by IDs.
func (pc *ProfessorCreate) AddCareerIDs(ids ...int) *ProfessorCreate {
	pc.mutation.AddCareerIDs(ids...)
	return pc
}

// AddCareers adds the "careers" edges to the Careers entity.
func (pc *ProfessorCreate) AddCareers(c ...*Careers) *ProfessorCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCareerIDs(ids...)
}

// Mutation returns the ProfessorMutation object of the builder.
func (pc *ProfessorCreate) Mutation() *ProfessorMutation {
	return pc.mutation
}

// Save creates the Professor in the database.
func (pc *ProfessorCreate) Save(ctx context.Context) (*Professor, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfessorCreate) SaveX(ctx context.Context) *Professor {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfessorCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfessorCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfessorCreate) check() error {
	if _, ok := pc.mutation.IdentityCard(); !ok {
		return &ValidationError{Name: "identity_card", err: errors.New(`ent: missing required field "Professor.identity_card"`)}
	}
	if v, ok := pc.mutation.IdentityCard(); ok {
		if err := professor.IdentityCardValidator(v); err != nil {
			return &ValidationError{Name: "identity_card", err: fmt.Errorf(`ent: validator failed for field "Professor.identity_card": %w`, err)}
		}
	}
	if _, ok := pc.mutation.BirthDate(); !ok {
		return &ValidationError{Name: "birth_date", err: errors.New(`ent: missing required field "Professor.birth_date"`)}
	}
	if _, ok := pc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Professor.phone"`)}
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := professor.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Professor.phone": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Professor.address"`)}
	}
	if v, ok := pc.mutation.Address(); ok {
		if err := professor.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Professor.address": %w`, err)}
		}
	}
	return nil
}

func (pc *ProfessorCreate) sqlSave(ctx context.Context) (*Professor, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfessorCreate) createSpec() (*Professor, *sqlgraph.CreateSpec) {
	var (
		_node = &Professor{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(professor.Table, sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.IdentityCard(); ok {
		_spec.SetField(professor.FieldIdentityCard, field.TypeString, value)
		_node.IdentityCard = value
	}
	if value, ok := pc.mutation.BirthDate(); ok {
		_spec.SetField(professor.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.SetField(professor.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.SetField(professor.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := pc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   professor.UserTable,
			Columns: []string{professor.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.professor_user = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BossIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.BossTable,
			Columns: []string{professor.BossColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.professor_subordinates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubordinatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   professor.SubordinatesTable,
			Columns: []string{professor.SubordinatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   professor.SubjectsTable,
			Columns: []string{professor.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CareersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   professor.CareersTable,
			Columns: []string{professor.CareersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(careers.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProfessorCreateBulk is the builder for creating many Professor entities in bulk.
type ProfessorCreateBulk struct {
	config
	err      error
	builders []*ProfessorCreate
}

// Save creates the Professor entities in the database.
func (pcb *ProfessorCreateBulk) Save(ctx context.Context) ([]*Professor, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Professor, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfessorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfessorCreateBulk) SaveX(ctx context.Context) []*Professor {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfessorCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfessorCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
