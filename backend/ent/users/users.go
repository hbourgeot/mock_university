// Code generated by ent, DO NOT EDIT.

package users

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the users type in the database.
	Label = "users"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCareers holds the string denoting the careers edge name in mutations.
	EdgeCareers = "careers"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeRequestsMade holds the string denoting the requests_made edge name in mutations.
	EdgeRequestsMade = "requests_made"
	// EdgeRequestsReceived holds the string denoting the requests_received edge name in mutations.
	EdgeRequestsReceived = "requests_received"
	// Table holds the table name of the users in the database.
	Table = "users"
	// CareersTable is the table that holds the careers relation/edge.
	CareersTable = "careers"
	// CareersInverseTable is the table name for the Careers entity.
	// It exists in this package in order to avoid circular dependency with the "careers" package.
	CareersInverseTable = "careers"
	// CareersColumn is the table column denoting the careers relation/edge.
	CareersColumn = "users_careers"
	// RoleTable is the table that holds the role relation/edge. The primary key declared below.
	RoleTable = "users_role"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RequestsMadeTable is the table that holds the requests_made relation/edge.
	RequestsMadeTable = "requests"
	// RequestsMadeInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestsMadeInverseTable = "requests"
	// RequestsMadeColumn is the table column denoting the requests_made relation/edge.
	RequestsMadeColumn = "users_requests_made"
	// RequestsReceivedTable is the table that holds the requests_received relation/edge.
	RequestsReceivedTable = "requests"
	// RequestsReceivedInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestsReceivedInverseTable = "requests"
	// RequestsReceivedColumn is the table column denoting the requests_received relation/edge.
	RequestsReceivedColumn = "users_requests_received"
)

// Columns holds all SQL columns for users fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldEmail,
	FieldName,
	FieldAvatar,
	FieldIsActive,
	FieldCreatedAt,
}

var (
	// RolePrimaryKey and RoleColumn2 are the table columns denoting the
	// primary key for the role relation (M2M).
	RolePrimaryKey = []string{"users_id", "role_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Users queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCareersCount orders the results by careers count.
func ByCareersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCareersStep(), opts...)
	}
}

// ByCareers orders the results by careers terms.
func ByCareers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCareersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoleCount orders the results by role count.
func ByRoleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoleStep(), opts...)
	}
}

// ByRole orders the results by role terms.
func ByRole(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequestsMadeCount orders the results by requests_made count.
func ByRequestsMadeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestsMadeStep(), opts...)
	}
}

// ByRequestsMade orders the results by requests_made terms.
func ByRequestsMade(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestsMadeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRequestsReceivedCount orders the results by requests_received count.
func ByRequestsReceivedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestsReceivedStep(), opts...)
	}
}

// ByRequestsReceived orders the results by requests_received terms.
func ByRequestsReceived(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestsReceivedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCareersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CareersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CareersTable, CareersColumn),
	)
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RoleTable, RolePrimaryKey...),
	)
}
func newRequestsMadeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestsMadeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestsMadeTable, RequestsMadeColumn),
	)
}
func newRequestsReceivedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestsReceivedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestsReceivedTable, RequestsReceivedColumn),
	)
}
