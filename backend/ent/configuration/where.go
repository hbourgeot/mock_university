// Code generated by ent, DO NOT EDIT.

package configuration

import (
	"mocku/backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldID, id))
}

// StartRegistrationSubjects applies equality check predicate on the "start_registration_subjects" field. It's identical to StartRegistrationSubjectsEQ.
func StartRegistrationSubjects(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldStartRegistrationSubjects, v))
}

// EndRegistrationSubjects applies equality check predicate on the "end_registration_subjects" field. It's identical to EndRegistrationSubjectsEQ.
func EndRegistrationSubjects(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldEndRegistrationSubjects, v))
}

// BlockNotPayInscription applies equality check predicate on the "block_not_pay_inscription" field. It's identical to BlockNotPayInscriptionEQ.
func BlockNotPayInscription(v bool) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldBlockNotPayInscription, v))
}

// NumberFees applies equality check predicate on the "number_fees" field. It's identical to NumberFeesEQ.
func NumberFees(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldNumberFees, v))
}

// NumberNotes applies equality check predicate on the "number_notes" field. It's identical to NumberNotesEQ.
func NumberNotes(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldNumberNotes, v))
}

// StartRegistrationSubjectsEQ applies the EQ predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldStartRegistrationSubjects, v))
}

// StartRegistrationSubjectsNEQ applies the NEQ predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsNEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldStartRegistrationSubjects, v))
}

// StartRegistrationSubjectsIn applies the In predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldStartRegistrationSubjects, vs...))
}

// StartRegistrationSubjectsNotIn applies the NotIn predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsNotIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldStartRegistrationSubjects, vs...))
}

// StartRegistrationSubjectsGT applies the GT predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsGT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldStartRegistrationSubjects, v))
}

// StartRegistrationSubjectsGTE applies the GTE predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsGTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldStartRegistrationSubjects, v))
}

// StartRegistrationSubjectsLT applies the LT predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsLT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldStartRegistrationSubjects, v))
}

// StartRegistrationSubjectsLTE applies the LTE predicate on the "start_registration_subjects" field.
func StartRegistrationSubjectsLTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldStartRegistrationSubjects, v))
}

// EndRegistrationSubjectsEQ applies the EQ predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldEndRegistrationSubjects, v))
}

// EndRegistrationSubjectsNEQ applies the NEQ predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsNEQ(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldEndRegistrationSubjects, v))
}

// EndRegistrationSubjectsIn applies the In predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldEndRegistrationSubjects, vs...))
}

// EndRegistrationSubjectsNotIn applies the NotIn predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsNotIn(vs ...time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldEndRegistrationSubjects, vs...))
}

// EndRegistrationSubjectsGT applies the GT predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsGT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldEndRegistrationSubjects, v))
}

// EndRegistrationSubjectsGTE applies the GTE predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsGTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldEndRegistrationSubjects, v))
}

// EndRegistrationSubjectsLT applies the LT predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsLT(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldEndRegistrationSubjects, v))
}

// EndRegistrationSubjectsLTE applies the LTE predicate on the "end_registration_subjects" field.
func EndRegistrationSubjectsLTE(v time.Time) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldEndRegistrationSubjects, v))
}

// BlockNotPayInscriptionEQ applies the EQ predicate on the "block_not_pay_inscription" field.
func BlockNotPayInscriptionEQ(v bool) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldBlockNotPayInscription, v))
}

// BlockNotPayInscriptionNEQ applies the NEQ predicate on the "block_not_pay_inscription" field.
func BlockNotPayInscriptionNEQ(v bool) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldBlockNotPayInscription, v))
}

// FeeDatesIsNil applies the IsNil predicate on the "fee_dates" field.
func FeeDatesIsNil() predicate.Configuration {
	return predicate.Configuration(sql.FieldIsNull(FieldFeeDates))
}

// FeeDatesNotNil applies the NotNil predicate on the "fee_dates" field.
func FeeDatesNotNil() predicate.Configuration {
	return predicate.Configuration(sql.FieldNotNull(FieldFeeDates))
}

// NumberFeesEQ applies the EQ predicate on the "number_fees" field.
func NumberFeesEQ(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldNumberFees, v))
}

// NumberFeesNEQ applies the NEQ predicate on the "number_fees" field.
func NumberFeesNEQ(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldNumberFees, v))
}

// NumberFeesIn applies the In predicate on the "number_fees" field.
func NumberFeesIn(vs ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldNumberFees, vs...))
}

// NumberFeesNotIn applies the NotIn predicate on the "number_fees" field.
func NumberFeesNotIn(vs ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldNumberFees, vs...))
}

// NumberFeesGT applies the GT predicate on the "number_fees" field.
func NumberFeesGT(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldNumberFees, v))
}

// NumberFeesGTE applies the GTE predicate on the "number_fees" field.
func NumberFeesGTE(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldNumberFees, v))
}

// NumberFeesLT applies the LT predicate on the "number_fees" field.
func NumberFeesLT(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldNumberFees, v))
}

// NumberFeesLTE applies the LTE predicate on the "number_fees" field.
func NumberFeesLTE(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldNumberFees, v))
}

// NumberNotesEQ applies the EQ predicate on the "number_notes" field.
func NumberNotesEQ(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldEQ(FieldNumberNotes, v))
}

// NumberNotesNEQ applies the NEQ predicate on the "number_notes" field.
func NumberNotesNEQ(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNEQ(FieldNumberNotes, v))
}

// NumberNotesIn applies the In predicate on the "number_notes" field.
func NumberNotesIn(vs ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldIn(FieldNumberNotes, vs...))
}

// NumberNotesNotIn applies the NotIn predicate on the "number_notes" field.
func NumberNotesNotIn(vs ...int) predicate.Configuration {
	return predicate.Configuration(sql.FieldNotIn(FieldNumberNotes, vs...))
}

// NumberNotesGT applies the GT predicate on the "number_notes" field.
func NumberNotesGT(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGT(FieldNumberNotes, v))
}

// NumberNotesGTE applies the GTE predicate on the "number_notes" field.
func NumberNotesGTE(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldGTE(FieldNumberNotes, v))
}

// NumberNotesLT applies the LT predicate on the "number_notes" field.
func NumberNotesLT(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLT(FieldNumberNotes, v))
}

// NumberNotesLTE applies the LTE predicate on the "number_notes" field.
func NumberNotesLTE(v int) predicate.Configuration {
	return predicate.Configuration(sql.FieldLTE(FieldNumberNotes, v))
}

// HasCycle applies the HasEdge predicate on the "cycle" edge.
func HasCycle() predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CycleTable, CycleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCycleWith applies the HasEdge predicate on the "cycle" edge with a given conditions (other predicates).
func HasCycleWith(preds ...predicate.Cycle) predicate.Configuration {
	return predicate.Configuration(func(s *sql.Selector) {
		step := newCycleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Configuration) predicate.Configuration {
	return predicate.Configuration(sql.NotPredicates(p))
}
