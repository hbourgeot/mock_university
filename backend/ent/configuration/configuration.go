// Code generated by ent, DO NOT EDIT.

package configuration

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the configuration type in the database.
	Label = "configuration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartRegistrationSubjects holds the string denoting the start_registration_subjects field in the database.
	FieldStartRegistrationSubjects = "start_registration_subjects"
	// FieldEndRegistrationSubjects holds the string denoting the end_registration_subjects field in the database.
	FieldEndRegistrationSubjects = "end_registration_subjects"
	// FieldBlockNotPayInscription holds the string denoting the block_not_pay_inscription field in the database.
	FieldBlockNotPayInscription = "block_not_pay_inscription"
	// FieldFeeDates holds the string denoting the fee_dates field in the database.
	FieldFeeDates = "fee_dates"
	// FieldNumberFees holds the string denoting the number_fees field in the database.
	FieldNumberFees = "number_fees"
	// FieldNumberNotes holds the string denoting the number_notes field in the database.
	FieldNumberNotes = "number_notes"
	// EdgeCycle holds the string denoting the cycle edge name in mutations.
	EdgeCycle = "cycle"
	// Table holds the table name of the configuration in the database.
	Table = "configurations"
	// CycleTable is the table that holds the cycle relation/edge.
	CycleTable = "configurations"
	// CycleInverseTable is the table name for the Cycle entity.
	// It exists in this package in order to avoid circular dependency with the "cycle" package.
	CycleInverseTable = "cycles"
	// CycleColumn is the table column denoting the cycle relation/edge.
	CycleColumn = "configuration_cycle"
)

// Columns holds all SQL columns for configuration fields.
var Columns = []string{
	FieldID,
	FieldStartRegistrationSubjects,
	FieldEndRegistrationSubjects,
	FieldBlockNotPayInscription,
	FieldFeeDates,
	FieldNumberFees,
	FieldNumberNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "configurations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"configuration_cycle",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBlockNotPayInscription holds the default value on creation for the "block_not_pay_inscription" field.
	DefaultBlockNotPayInscription bool
	// DefaultNumberFees holds the default value on creation for the "number_fees" field.
	DefaultNumberFees int
	// DefaultNumberNotes holds the default value on creation for the "number_notes" field.
	DefaultNumberNotes int
)

// OrderOption defines the ordering options for the Configuration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartRegistrationSubjects orders the results by the start_registration_subjects field.
func ByStartRegistrationSubjects(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartRegistrationSubjects, opts...).ToFunc()
}

// ByEndRegistrationSubjects orders the results by the end_registration_subjects field.
func ByEndRegistrationSubjects(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndRegistrationSubjects, opts...).ToFunc()
}

// ByBlockNotPayInscription orders the results by the block_not_pay_inscription field.
func ByBlockNotPayInscription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNotPayInscription, opts...).ToFunc()
}

// ByNumberFees orders the results by the number_fees field.
func ByNumberFees(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberFees, opts...).ToFunc()
}

// ByNumberNotes orders the results by the number_notes field.
func ByNumberNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberNotes, opts...).ToFunc()
}

// ByCycleField orders the results by cycle field.
func ByCycleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCycleStep(), sql.OrderByField(field, opts...))
	}
}
func newCycleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CycleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CycleTable, CycleColumn),
	)
}
