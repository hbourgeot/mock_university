// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/configuration"
	"mocku/backend/ent/cycle"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConfigurationCreate is the builder for creating a Configuration entity.
type ConfigurationCreate struct {
	config
	mutation *ConfigurationMutation
	hooks    []Hook
}

// SetStartRegistrationSubjects sets the "start_registration_subjects" field.
func (cc *ConfigurationCreate) SetStartRegistrationSubjects(t time.Time) *ConfigurationCreate {
	cc.mutation.SetStartRegistrationSubjects(t)
	return cc
}

// SetEndRegistrationSubjects sets the "end_registration_subjects" field.
func (cc *ConfigurationCreate) SetEndRegistrationSubjects(t time.Time) *ConfigurationCreate {
	cc.mutation.SetEndRegistrationSubjects(t)
	return cc
}

// SetBlockNotPayInscription sets the "block_not_pay_inscription" field.
func (cc *ConfigurationCreate) SetBlockNotPayInscription(b bool) *ConfigurationCreate {
	cc.mutation.SetBlockNotPayInscription(b)
	return cc
}

// SetNillableBlockNotPayInscription sets the "block_not_pay_inscription" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableBlockNotPayInscription(b *bool) *ConfigurationCreate {
	if b != nil {
		cc.SetBlockNotPayInscription(*b)
	}
	return cc
}

// SetFeeDates sets the "fee_dates" field.
func (cc *ConfigurationCreate) SetFeeDates(t []time.Time) *ConfigurationCreate {
	cc.mutation.SetFeeDates(t)
	return cc
}

// SetNumberFees sets the "number_fees" field.
func (cc *ConfigurationCreate) SetNumberFees(i int) *ConfigurationCreate {
	cc.mutation.SetNumberFees(i)
	return cc
}

// SetNillableNumberFees sets the "number_fees" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableNumberFees(i *int) *ConfigurationCreate {
	if i != nil {
		cc.SetNumberFees(*i)
	}
	return cc
}

// SetNumberNotes sets the "number_notes" field.
func (cc *ConfigurationCreate) SetNumberNotes(i int) *ConfigurationCreate {
	cc.mutation.SetNumberNotes(i)
	return cc
}

// SetNillableNumberNotes sets the "number_notes" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableNumberNotes(i *int) *ConfigurationCreate {
	if i != nil {
		cc.SetNumberNotes(*i)
	}
	return cc
}

// SetCycleID sets the "cycle" edge to the Cycle entity by ID.
func (cc *ConfigurationCreate) SetCycleID(id int) *ConfigurationCreate {
	cc.mutation.SetCycleID(id)
	return cc
}

// SetNillableCycleID sets the "cycle" edge to the Cycle entity by ID if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableCycleID(id *int) *ConfigurationCreate {
	if id != nil {
		cc = cc.SetCycleID(*id)
	}
	return cc
}

// SetCycle sets the "cycle" edge to the Cycle entity.
func (cc *ConfigurationCreate) SetCycle(c *Cycle) *ConfigurationCreate {
	return cc.SetCycleID(c.ID)
}

// Mutation returns the ConfigurationMutation object of the builder.
func (cc *ConfigurationCreate) Mutation() *ConfigurationMutation {
	return cc.mutation
}

// Save creates the Configuration in the database.
func (cc *ConfigurationCreate) Save(ctx context.Context) (*Configuration, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfigurationCreate) SaveX(ctx context.Context) *Configuration {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConfigurationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConfigurationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConfigurationCreate) defaults() {
	if _, ok := cc.mutation.BlockNotPayInscription(); !ok {
		v := configuration.DefaultBlockNotPayInscription
		cc.mutation.SetBlockNotPayInscription(v)
	}
	if _, ok := cc.mutation.NumberFees(); !ok {
		v := configuration.DefaultNumberFees
		cc.mutation.SetNumberFees(v)
	}
	if _, ok := cc.mutation.NumberNotes(); !ok {
		v := configuration.DefaultNumberNotes
		cc.mutation.SetNumberNotes(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConfigurationCreate) check() error {
	if _, ok := cc.mutation.StartRegistrationSubjects(); !ok {
		return &ValidationError{Name: "start_registration_subjects", err: errors.New(`ent: missing required field "Configuration.start_registration_subjects"`)}
	}
	if _, ok := cc.mutation.EndRegistrationSubjects(); !ok {
		return &ValidationError{Name: "end_registration_subjects", err: errors.New(`ent: missing required field "Configuration.end_registration_subjects"`)}
	}
	if _, ok := cc.mutation.BlockNotPayInscription(); !ok {
		return &ValidationError{Name: "block_not_pay_inscription", err: errors.New(`ent: missing required field "Configuration.block_not_pay_inscription"`)}
	}
	if _, ok := cc.mutation.NumberFees(); !ok {
		return &ValidationError{Name: "number_fees", err: errors.New(`ent: missing required field "Configuration.number_fees"`)}
	}
	if _, ok := cc.mutation.NumberNotes(); !ok {
		return &ValidationError{Name: "number_notes", err: errors.New(`ent: missing required field "Configuration.number_notes"`)}
	}
	return nil
}

func (cc *ConfigurationCreate) sqlSave(ctx context.Context) (*Configuration, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConfigurationCreate) createSpec() (*Configuration, *sqlgraph.CreateSpec) {
	var (
		_node = &Configuration{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(configuration.Table, sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.StartRegistrationSubjects(); ok {
		_spec.SetField(configuration.FieldStartRegistrationSubjects, field.TypeTime, value)
		_node.StartRegistrationSubjects = value
	}
	if value, ok := cc.mutation.EndRegistrationSubjects(); ok {
		_spec.SetField(configuration.FieldEndRegistrationSubjects, field.TypeTime, value)
		_node.EndRegistrationSubjects = value
	}
	if value, ok := cc.mutation.BlockNotPayInscription(); ok {
		_spec.SetField(configuration.FieldBlockNotPayInscription, field.TypeBool, value)
		_node.BlockNotPayInscription = value
	}
	if value, ok := cc.mutation.FeeDates(); ok {
		_spec.SetField(configuration.FieldFeeDates, field.TypeJSON, value)
		_node.FeeDates = value
	}
	if value, ok := cc.mutation.NumberFees(); ok {
		_spec.SetField(configuration.FieldNumberFees, field.TypeInt, value)
		_node.NumberFees = value
	}
	if value, ok := cc.mutation.NumberNotes(); ok {
		_spec.SetField(configuration.FieldNumberNotes, field.TypeInt, value)
		_node.NumberNotes = value
	}
	if nodes := cc.mutation.CycleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   configuration.CycleTable,
			Columns: []string{configuration.CycleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cycle.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.configuration_cycle = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConfigurationCreateBulk is the builder for creating many Configuration entities in bulk.
type ConfigurationCreateBulk struct {
	config
	err      error
	builders []*ConfigurationCreate
}

// Save creates the Configuration entities in the database.
func (ccb *ConfigurationCreateBulk) Save(ctx context.Context) ([]*Configuration, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Configuration, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConfigurationCreateBulk) SaveX(ctx context.Context) []*Configuration {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConfigurationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConfigurationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
