// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"mocku/backend/ent/configuration"
	"mocku/backend/ent/cycle"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Configuration is the model entity for the Configuration schema.
type Configuration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartRegistrationSubjects holds the value of the "start_registration_subjects" field.
	StartRegistrationSubjects time.Time `json:"start_registration_subjects,omitempty"`
	// EndRegistrationSubjects holds the value of the "end_registration_subjects" field.
	EndRegistrationSubjects time.Time `json:"end_registration_subjects,omitempty"`
	// BlockNotPayInscription holds the value of the "block_not_pay_inscription" field.
	BlockNotPayInscription bool `json:"block_not_pay_inscription,omitempty"`
	// FeeDates holds the value of the "fee_dates" field.
	FeeDates []time.Time `json:"fee_dates,omitempty"`
	// NumberFees holds the value of the "number_fees" field.
	NumberFees int `json:"number_fees,omitempty"`
	// NumberNotes holds the value of the "number_notes" field.
	NumberNotes int `json:"number_notes,omitempty"`
	// NotesPercentages holds the value of the "notes_Percentages" field.
	NotesPercentages []float64 `json:"notes_Percentages,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConfigurationQuery when eager-loading is set.
	Edges               ConfigurationEdges `json:"edges"`
	configuration_cycle *int
	selectValues        sql.SelectValues
}

// ConfigurationEdges holds the relations/edges for other nodes in the graph.
type ConfigurationEdges struct {
	// Cycle holds the value of the cycle edge.
	Cycle *Cycle `json:"cycle,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CycleOrErr returns the Cycle value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConfigurationEdges) CycleOrErr() (*Cycle, error) {
	if e.Cycle != nil {
		return e.Cycle, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: cycle.Label}
	}
	return nil, &NotLoadedError{edge: "cycle"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Configuration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case configuration.FieldFeeDates, configuration.FieldNotesPercentages:
			values[i] = new([]byte)
		case configuration.FieldBlockNotPayInscription:
			values[i] = new(sql.NullBool)
		case configuration.FieldID, configuration.FieldNumberFees, configuration.FieldNumberNotes:
			values[i] = new(sql.NullInt64)
		case configuration.FieldStartRegistrationSubjects, configuration.FieldEndRegistrationSubjects:
			values[i] = new(sql.NullTime)
		case configuration.ForeignKeys[0]: // configuration_cycle
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Configuration fields.
func (c *Configuration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case configuration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case configuration.FieldStartRegistrationSubjects:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_registration_subjects", values[i])
			} else if value.Valid {
				c.StartRegistrationSubjects = value.Time
			}
		case configuration.FieldEndRegistrationSubjects:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_registration_subjects", values[i])
			} else if value.Valid {
				c.EndRegistrationSubjects = value.Time
			}
		case configuration.FieldBlockNotPayInscription:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field block_not_pay_inscription", values[i])
			} else if value.Valid {
				c.BlockNotPayInscription = value.Bool
			}
		case configuration.FieldFeeDates:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field fee_dates", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.FeeDates); err != nil {
					return fmt.Errorf("unmarshal field fee_dates: %w", err)
				}
			}
		case configuration.FieldNumberFees:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_fees", values[i])
			} else if value.Valid {
				c.NumberFees = int(value.Int64)
			}
		case configuration.FieldNumberNotes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_notes", values[i])
			} else if value.Valid {
				c.NumberNotes = int(value.Int64)
			}
		case configuration.FieldNotesPercentages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notes_Percentages", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.NotesPercentages); err != nil {
					return fmt.Errorf("unmarshal field notes_Percentages: %w", err)
				}
			}
		case configuration.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field configuration_cycle", value)
			} else if value.Valid {
				c.configuration_cycle = new(int)
				*c.configuration_cycle = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Configuration.
// This includes values selected through modifiers, order, etc.
func (c *Configuration) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCycle queries the "cycle" edge of the Configuration entity.
func (c *Configuration) QueryCycle() *CycleQuery {
	return NewConfigurationClient(c.config).QueryCycle(c)
}

// Update returns a builder for updating this Configuration.
// Note that you need to call Configuration.Unwrap() before calling this method if this Configuration
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Configuration) Update() *ConfigurationUpdateOne {
	return NewConfigurationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Configuration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Configuration) Unwrap() *Configuration {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Configuration is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Configuration) String() string {
	var builder strings.Builder
	builder.WriteString("Configuration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("start_registration_subjects=")
	builder.WriteString(c.StartRegistrationSubjects.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_registration_subjects=")
	builder.WriteString(c.EndRegistrationSubjects.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("block_not_pay_inscription=")
	builder.WriteString(fmt.Sprintf("%v", c.BlockNotPayInscription))
	builder.WriteString(", ")
	builder.WriteString("fee_dates=")
	builder.WriteString(fmt.Sprintf("%v", c.FeeDates))
	builder.WriteString(", ")
	builder.WriteString("number_fees=")
	builder.WriteString(fmt.Sprintf("%v", c.NumberFees))
	builder.WriteString(", ")
	builder.WriteString("number_notes=")
	builder.WriteString(fmt.Sprintf("%v", c.NumberNotes))
	builder.WriteString(", ")
	builder.WriteString("notes_Percentages=")
	builder.WriteString(fmt.Sprintf("%v", c.NotesPercentages))
	builder.WriteByte(')')
	return builder.String()
}

// Configurations is a parsable slice of Configuration.
type Configurations []*Configuration
