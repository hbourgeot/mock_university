// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mocku/backend/ent/predicate"
	"mocku/backend/ent/student"
	"mocku/backend/ent/users"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (su *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetIdentityCard sets the "identity_card" field.
func (su *StudentUpdate) SetIdentityCard(s string) *StudentUpdate {
	su.mutation.SetIdentityCard(s)
	return su
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (su *StudentUpdate) SetNillableIdentityCard(s *string) *StudentUpdate {
	if s != nil {
		su.SetIdentityCard(*s)
	}
	return su
}

// SetBirthDate sets the "birth_date" field.
func (su *StudentUpdate) SetBirthDate(t time.Time) *StudentUpdate {
	su.mutation.SetBirthDate(t)
	return su
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (su *StudentUpdate) SetNillableBirthDate(t *time.Time) *StudentUpdate {
	if t != nil {
		su.SetBirthDate(*t)
	}
	return su
}

// SetPhone sets the "phone" field.
func (su *StudentUpdate) SetPhone(s string) *StudentUpdate {
	su.mutation.SetPhone(s)
	return su
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (su *StudentUpdate) SetNillablePhone(s *string) *StudentUpdate {
	if s != nil {
		su.SetPhone(*s)
	}
	return su
}

// SetAddress sets the "address" field.
func (su *StudentUpdate) SetAddress(s string) *StudentUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *StudentUpdate) SetNillableAddress(s *string) *StudentUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// SetNumber sets the "number" field.
func (su *StudentUpdate) SetNumber(i int) *StudentUpdate {
	su.mutation.ResetNumber()
	su.mutation.SetNumber(i)
	return su
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (su *StudentUpdate) SetNillableNumber(i *int) *StudentUpdate {
	if i != nil {
		su.SetNumber(*i)
	}
	return su
}

// AddNumber adds i to the "number" field.
func (su *StudentUpdate) AddNumber(i int) *StudentUpdate {
	su.mutation.AddNumber(i)
	return su
}

// SetDistrict sets the "district" field.
func (su *StudentUpdate) SetDistrict(s string) *StudentUpdate {
	su.mutation.SetDistrict(s)
	return su
}

// SetNillableDistrict sets the "district" field if the given value is not nil.
func (su *StudentUpdate) SetNillableDistrict(s *string) *StudentUpdate {
	if s != nil {
		su.SetDistrict(*s)
	}
	return su
}

// SetCity sets the "city" field.
func (su *StudentUpdate) SetCity(s string) *StudentUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (su *StudentUpdate) SetNillableCity(s *string) *StudentUpdate {
	if s != nil {
		su.SetCity(*s)
	}
	return su
}

// SetPostalCode sets the "postal_code" field.
func (su *StudentUpdate) SetPostalCode(i int) *StudentUpdate {
	su.mutation.ResetPostalCode()
	su.mutation.SetPostalCode(i)
	return su
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (su *StudentUpdate) SetNillablePostalCode(i *int) *StudentUpdate {
	if i != nil {
		su.SetPostalCode(*i)
	}
	return su
}

// AddPostalCode adds i to the "postal_code" field.
func (su *StudentUpdate) AddPostalCode(i int) *StudentUpdate {
	su.mutation.AddPostalCode(i)
	return su
}

// SetCreditUnitsAccumulated sets the "credit_units_accumulated" field.
func (su *StudentUpdate) SetCreditUnitsAccumulated(i int) *StudentUpdate {
	su.mutation.ResetCreditUnitsAccumulated()
	su.mutation.SetCreditUnitsAccumulated(i)
	return su
}

// SetNillableCreditUnitsAccumulated sets the "credit_units_accumulated" field if the given value is not nil.
func (su *StudentUpdate) SetNillableCreditUnitsAccumulated(i *int) *StudentUpdate {
	if i != nil {
		su.SetCreditUnitsAccumulated(*i)
	}
	return su
}

// AddCreditUnitsAccumulated adds i to the "credit_units_accumulated" field.
func (su *StudentUpdate) AddCreditUnitsAccumulated(i int) *StudentUpdate {
	su.mutation.AddCreditUnitsAccumulated(i)
	return su
}

// SetTotalAverage sets the "total_average" field.
func (su *StudentUpdate) SetTotalAverage(f float64) *StudentUpdate {
	su.mutation.ResetTotalAverage()
	su.mutation.SetTotalAverage(f)
	return su
}

// SetNillableTotalAverage sets the "total_average" field if the given value is not nil.
func (su *StudentUpdate) SetNillableTotalAverage(f *float64) *StudentUpdate {
	if f != nil {
		su.SetTotalAverage(*f)
	}
	return su
}

// AddTotalAverage adds f to the "total_average" field.
func (su *StudentUpdate) AddTotalAverage(f float64) *StudentUpdate {
	su.mutation.AddTotalAverage(f)
	return su
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (su *StudentUpdate) SetUserID(id int) *StudentUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (su *StudentUpdate) SetNillableUserID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetUserID(*id)
	}
	return su
}

// SetUser sets the "user" edge to the Users entity.
func (su *StudentUpdate) SetUser(u *Users) *StudentUpdate {
	return su.SetUserID(u.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (su *StudentUpdate) Mutation() *StudentMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (su *StudentUpdate) ClearUser() *StudentUpdate {
	su.mutation.ClearUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StudentUpdate) check() error {
	if v, ok := su.mutation.IdentityCard(); ok {
		if err := student.IdentityCardValidator(v); err != nil {
			return &ValidationError{Name: "identity_card", err: fmt.Errorf(`ent: validator failed for field "Student.identity_card": %w`, err)}
		}
	}
	if v, ok := su.mutation.Phone(); ok {
		if err := student.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Student.phone": %w`, err)}
		}
	}
	if v, ok := su.mutation.Address(); ok {
		if err := student.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Student.address": %w`, err)}
		}
	}
	if v, ok := su.mutation.Number(); ok {
		if err := student.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Student.number": %w`, err)}
		}
	}
	if v, ok := su.mutation.District(); ok {
		if err := student.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "district", err: fmt.Errorf(`ent: validator failed for field "Student.district": %w`, err)}
		}
	}
	if v, ok := su.mutation.City(); ok {
		if err := student.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Student.city": %w`, err)}
		}
	}
	if v, ok := su.mutation.PostalCode(); ok {
		if err := student.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Student.postal_code": %w`, err)}
		}
	}
	if v, ok := su.mutation.CreditUnitsAccumulated(); ok {
		if err := student.CreditUnitsAccumulatedValidator(v); err != nil {
			return &ValidationError{Name: "credit_units_accumulated", err: fmt.Errorf(`ent: validator failed for field "Student.credit_units_accumulated": %w`, err)}
		}
	}
	if v, ok := su.mutation.TotalAverage(); ok {
		if err := student.TotalAverageValidator(v); err != nil {
			return &ValidationError{Name: "total_average", err: fmt.Errorf(`ent: validator failed for field "Student.total_average": %w`, err)}
		}
	}
	return nil
}

func (su *StudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.IdentityCard(); ok {
		_spec.SetField(student.FieldIdentityCard, field.TypeString, value)
	}
	if value, ok := su.mutation.BirthDate(); ok {
		_spec.SetField(student.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := su.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.Number(); ok {
		_spec.SetField(student.FieldNumber, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedNumber(); ok {
		_spec.AddField(student.FieldNumber, field.TypeInt, value)
	}
	if value, ok := su.mutation.District(); ok {
		_spec.SetField(student.FieldDistrict, field.TypeString, value)
	}
	if value, ok := su.mutation.City(); ok {
		_spec.SetField(student.FieldCity, field.TypeString, value)
	}
	if value, ok := su.mutation.PostalCode(); ok {
		_spec.SetField(student.FieldPostalCode, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPostalCode(); ok {
		_spec.AddField(student.FieldPostalCode, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreditUnitsAccumulated(); ok {
		_spec.SetField(student.FieldCreditUnitsAccumulated, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCreditUnitsAccumulated(); ok {
		_spec.AddField(student.FieldCreditUnitsAccumulated, field.TypeInt, value)
	}
	if value, ok := su.mutation.TotalAverage(); ok {
		_spec.SetField(student.FieldTotalAverage, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedTotalAverage(); ok {
		_spec.AddField(student.FieldTotalAverage, field.TypeFloat64, value)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetIdentityCard sets the "identity_card" field.
func (suo *StudentUpdateOne) SetIdentityCard(s string) *StudentUpdateOne {
	suo.mutation.SetIdentityCard(s)
	return suo
}

// SetNillableIdentityCard sets the "identity_card" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableIdentityCard(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetIdentityCard(*s)
	}
	return suo
}

// SetBirthDate sets the "birth_date" field.
func (suo *StudentUpdateOne) SetBirthDate(t time.Time) *StudentUpdateOne {
	suo.mutation.SetBirthDate(t)
	return suo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableBirthDate(t *time.Time) *StudentUpdateOne {
	if t != nil {
		suo.SetBirthDate(*t)
	}
	return suo
}

// SetPhone sets the "phone" field.
func (suo *StudentUpdateOne) SetPhone(s string) *StudentUpdateOne {
	suo.mutation.SetPhone(s)
	return suo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillablePhone(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetPhone(*s)
	}
	return suo
}

// SetAddress sets the "address" field.
func (suo *StudentUpdateOne) SetAddress(s string) *StudentUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableAddress(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// SetNumber sets the "number" field.
func (suo *StudentUpdateOne) SetNumber(i int) *StudentUpdateOne {
	suo.mutation.ResetNumber()
	suo.mutation.SetNumber(i)
	return suo
}

// SetNillableNumber sets the "number" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableNumber(i *int) *StudentUpdateOne {
	if i != nil {
		suo.SetNumber(*i)
	}
	return suo
}

// AddNumber adds i to the "number" field.
func (suo *StudentUpdateOne) AddNumber(i int) *StudentUpdateOne {
	suo.mutation.AddNumber(i)
	return suo
}

// SetDistrict sets the "district" field.
func (suo *StudentUpdateOne) SetDistrict(s string) *StudentUpdateOne {
	suo.mutation.SetDistrict(s)
	return suo
}

// SetNillableDistrict sets the "district" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableDistrict(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetDistrict(*s)
	}
	return suo
}

// SetCity sets the "city" field.
func (suo *StudentUpdateOne) SetCity(s string) *StudentUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableCity(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetCity(*s)
	}
	return suo
}

// SetPostalCode sets the "postal_code" field.
func (suo *StudentUpdateOne) SetPostalCode(i int) *StudentUpdateOne {
	suo.mutation.ResetPostalCode()
	suo.mutation.SetPostalCode(i)
	return suo
}

// SetNillablePostalCode sets the "postal_code" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillablePostalCode(i *int) *StudentUpdateOne {
	if i != nil {
		suo.SetPostalCode(*i)
	}
	return suo
}

// AddPostalCode adds i to the "postal_code" field.
func (suo *StudentUpdateOne) AddPostalCode(i int) *StudentUpdateOne {
	suo.mutation.AddPostalCode(i)
	return suo
}

// SetCreditUnitsAccumulated sets the "credit_units_accumulated" field.
func (suo *StudentUpdateOne) SetCreditUnitsAccumulated(i int) *StudentUpdateOne {
	suo.mutation.ResetCreditUnitsAccumulated()
	suo.mutation.SetCreditUnitsAccumulated(i)
	return suo
}

// SetNillableCreditUnitsAccumulated sets the "credit_units_accumulated" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableCreditUnitsAccumulated(i *int) *StudentUpdateOne {
	if i != nil {
		suo.SetCreditUnitsAccumulated(*i)
	}
	return suo
}

// AddCreditUnitsAccumulated adds i to the "credit_units_accumulated" field.
func (suo *StudentUpdateOne) AddCreditUnitsAccumulated(i int) *StudentUpdateOne {
	suo.mutation.AddCreditUnitsAccumulated(i)
	return suo
}

// SetTotalAverage sets the "total_average" field.
func (suo *StudentUpdateOne) SetTotalAverage(f float64) *StudentUpdateOne {
	suo.mutation.ResetTotalAverage()
	suo.mutation.SetTotalAverage(f)
	return suo
}

// SetNillableTotalAverage sets the "total_average" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableTotalAverage(f *float64) *StudentUpdateOne {
	if f != nil {
		suo.SetTotalAverage(*f)
	}
	return suo
}

// AddTotalAverage adds f to the "total_average" field.
func (suo *StudentUpdateOne) AddTotalAverage(f float64) *StudentUpdateOne {
	suo.mutation.AddTotalAverage(f)
	return suo
}

// SetUserID sets the "user" edge to the Users entity by ID.
func (suo *StudentUpdateOne) SetUserID(id int) *StudentUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetNillableUserID sets the "user" edge to the Users entity by ID if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableUserID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetUserID(*id)
	}
	return suo
}

// SetUser sets the "user" edge to the Users entity.
func (suo *StudentUpdateOne) SetUser(u *Users) *StudentUpdateOne {
	return suo.SetUserID(u.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (suo *StudentUpdateOne) Mutation() *StudentMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the Users entity.
func (suo *StudentUpdateOne) ClearUser() *StudentUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// Where appends a list predicates to the StudentUpdate builder.
func (suo *StudentUpdateOne) Where(ps ...predicate.Student) *StudentUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Student entity.
func (suo *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StudentUpdateOne) check() error {
	if v, ok := suo.mutation.IdentityCard(); ok {
		if err := student.IdentityCardValidator(v); err != nil {
			return &ValidationError{Name: "identity_card", err: fmt.Errorf(`ent: validator failed for field "Student.identity_card": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Phone(); ok {
		if err := student.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Student.phone": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Address(); ok {
		if err := student.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Student.address": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Number(); ok {
		if err := student.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Student.number": %w`, err)}
		}
	}
	if v, ok := suo.mutation.District(); ok {
		if err := student.DistrictValidator(v); err != nil {
			return &ValidationError{Name: "district", err: fmt.Errorf(`ent: validator failed for field "Student.district": %w`, err)}
		}
	}
	if v, ok := suo.mutation.City(); ok {
		if err := student.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Student.city": %w`, err)}
		}
	}
	if v, ok := suo.mutation.PostalCode(); ok {
		if err := student.PostalCodeValidator(v); err != nil {
			return &ValidationError{Name: "postal_code", err: fmt.Errorf(`ent: validator failed for field "Student.postal_code": %w`, err)}
		}
	}
	if v, ok := suo.mutation.CreditUnitsAccumulated(); ok {
		if err := student.CreditUnitsAccumulatedValidator(v); err != nil {
			return &ValidationError{Name: "credit_units_accumulated", err: fmt.Errorf(`ent: validator failed for field "Student.credit_units_accumulated": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TotalAverage(); ok {
		if err := student.TotalAverageValidator(v); err != nil {
			return &ValidationError{Name: "total_average", err: fmt.Errorf(`ent: validator failed for field "Student.total_average": %w`, err)}
		}
	}
	return nil
}

func (suo *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.IdentityCard(); ok {
		_spec.SetField(student.FieldIdentityCard, field.TypeString, value)
	}
	if value, ok := suo.mutation.BirthDate(); ok {
		_spec.SetField(student.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.Number(); ok {
		_spec.SetField(student.FieldNumber, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedNumber(); ok {
		_spec.AddField(student.FieldNumber, field.TypeInt, value)
	}
	if value, ok := suo.mutation.District(); ok {
		_spec.SetField(student.FieldDistrict, field.TypeString, value)
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.SetField(student.FieldCity, field.TypeString, value)
	}
	if value, ok := suo.mutation.PostalCode(); ok {
		_spec.SetField(student.FieldPostalCode, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPostalCode(); ok {
		_spec.AddField(student.FieldPostalCode, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreditUnitsAccumulated(); ok {
		_spec.SetField(student.FieldCreditUnitsAccumulated, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCreditUnitsAccumulated(); ok {
		_spec.AddField(student.FieldCreditUnitsAccumulated, field.TypeInt, value)
	}
	if value, ok := suo.mutation.TotalAverage(); ok {
		_spec.SetField(student.FieldTotalAverage, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedTotalAverage(); ok {
		_spec.AddField(student.FieldTotalAverage, field.TypeFloat64, value)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(users.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Student{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
