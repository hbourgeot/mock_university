// Code generated by ent, DO NOT EDIT.

package ent

import (
	"mocku/backend/ent/careers"
	"mocku/backend/ent/schema"
	"mocku/backend/ent/users"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	careersFields := schema.Careers{}.Fields()
	_ = careersFields
	// careersDescName is the schema descriptor for name field.
	careersDescName := careersFields[0].Descriptor()
	// careers.NameValidator is a validator for the "name" field. It is called by the builders before save.
	careers.NameValidator = func() func(string) error {
		validators := careersDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// careersDescDescription is the schema descriptor for description field.
	careersDescDescription := careersFields[1].Descriptor()
	// careers.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	careers.DescriptionValidator = careersDescDescription.Validators[0].(func(string) error)
	usersFields := schema.Users{}.Fields()
	_ = usersFields
	// usersDescUsername is the schema descriptor for username field.
	usersDescUsername := usersFields[0].Descriptor()
	// users.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	users.UsernameValidator = func() func(string) error {
		validators := usersDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescPassword is the schema descriptor for password field.
	usersDescPassword := usersFields[1].Descriptor()
	// users.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	users.PasswordValidator = func() func(string) error {
		validators := usersDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescEmail is the schema descriptor for email field.
	usersDescEmail := usersFields[2].Descriptor()
	// users.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	users.EmailValidator = func() func(string) error {
		validators := usersDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescName is the schema descriptor for name field.
	usersDescName := usersFields[3].Descriptor()
	// users.NameValidator is a validator for the "name" field. It is called by the builders before save.
	users.NameValidator = func() func(string) error {
		validators := usersDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// usersDescAvatar is the schema descriptor for avatar field.
	usersDescAvatar := usersFields[4].Descriptor()
	// users.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	users.AvatarValidator = usersDescAvatar.Validators[0].(func(string) error)
	// usersDescIsActive is the schema descriptor for is_active field.
	usersDescIsActive := usersFields[5].Descriptor()
	// users.DefaultIsActive holds the default value on creation for the is_active field.
	users.DefaultIsActive = usersDescIsActive.Default.(bool)
	// usersDescCreatedAt is the schema descriptor for created_at field.
	usersDescCreatedAt := usersFields[6].Descriptor()
	// users.DefaultCreatedAt holds the default value on creation for the created_at field.
	users.DefaultCreatedAt = usersDescCreatedAt.Default.(func() time.Time)
}
